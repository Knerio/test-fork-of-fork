From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dario Pranjic <derioreal63@gmail.com>
Date: Tue, 14 Jan 2025 22:37:56 +0100
Subject: [PATCH] Init translations


diff --git a/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java b/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
index fe66e43c27e0798770e102d1385bacbaa90bda07..929eeaf1d0441859caaa3a2e648ce0514b3ed0a8 100644
--- a/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
+++ b/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
@@ -15,6 +15,8 @@ import java.io.IOException;
 import java.io.InputStreamReader;
 import java.net.HttpURLConnection;
 import java.net.URI;
+import java.net.URL;
+import java.nio.charset.StandardCharsets;
 import java.util.Optional;
 import java.util.OptionalInt;
 import java.util.stream.StreamSupport;
@@ -22,6 +24,8 @@ import net.kyori.adventure.text.Component;
 import net.kyori.adventure.text.event.ClickEvent;
 import net.kyori.adventure.text.format.NamedTextColor;
 import net.kyori.adventure.text.format.TextDecoration;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftServer;
 import org.checkerframework.checker.nullness.qual.NonNull;
 import org.checkerframework.checker.nullness.qual.Nullable;
 import org.checkerframework.framework.qual.DefaultQualifier;
@@ -35,10 +39,10 @@ public class PaperVersionFetcher implements VersionFetcher {
     private static final Logger LOGGER = LogUtils.getClassLogger();
     private static final int DISTANCE_ERROR = -1;
     private static final int DISTANCE_UNKNOWN = -2;
-    // Purpur start - Rebrand
-    private static final String DOWNLOAD_PAGE = "https://purpurmc.org/downloads";
+    // Purpur start - Rebrand // Varilx start - Rebrand
+    private static final String DOWNLOAD_PAGE = "https://git.varilx.de/Varilx/vax-spigot/releases/";
     private static int distance = DISTANCE_UNKNOWN; public int distance() { return distance; }
-    // Purpur end - Rebrand
+    // Purpur end - Rebrand // Varilx end - Rebrand
 
     @Override
     public long getCacheTime() {
@@ -52,7 +56,7 @@ public class PaperVersionFetcher implements VersionFetcher {
         if (build.buildNumber().isEmpty() && build.gitCommit().isEmpty()) {
             updateMessage = text("You are running a development version without access to version information", color(0xFF5300));
         } else {
-            updateMessage = getUpdateStatusMessage("PurpurMC/Purpur", build); // Purpur - Rebrand
+            updateMessage = getUpdateStatusMessage("Varilx/vax-spigot", build); // Purpur - Rebrand
         }
         final @Nullable Component history = this.getHistory();
 
@@ -64,40 +68,49 @@ public class PaperVersionFetcher implements VersionFetcher {
 
         final OptionalInt buildNumber = build.buildNumber();
         if (buildNumber.isPresent()) {
-            distance = fetchDistanceFromSiteApi(build, buildNumber.getAsInt());
+            distance = fetchDistanceFromSiteApi(repo, build, buildNumber.getAsInt());
         } else {
             final Optional<String> gitBranch = build.gitBranch();
             final Optional<String> gitCommit = build.gitCommit();
             if (gitBranch.isPresent() && gitCommit.isPresent()) {
-                distance = fetchDistanceFromGitHub(repo, gitBranch.get(), gitCommit.get());
+                return text("You are running a development version without access to version information", color(0xFF5300));
             }
         }
 
         return switch (distance) {
-            case DISTANCE_ERROR -> text("* Error obtaining version information", NamedTextColor.RED); // Purpur - Rebrand
+            case DISTANCE_ERROR ->
+                    text("* Error obtaining version information", NamedTextColor.RED); // Purpur - Rebrand
             case 0 -> text("* You are running the latest version", NamedTextColor.GREEN); // Purpur - Rebrand
             case DISTANCE_UNKNOWN -> text("* Unknown version", NamedTextColor.YELLOW); // Purpur - Rebrand
             default -> text("* You are " + distance + " version(s) behind", NamedTextColor.YELLOW) // Purpur - Rebrand
-                .append(Component.newline())
-                .append(text("Download the new version at: ")
-                    .append(text(DOWNLOAD_PAGE, NamedTextColor.GOLD)
-                        .hoverEvent(text("Click to open", NamedTextColor.WHITE))
-                        .clickEvent(ClickEvent.openUrl(DOWNLOAD_PAGE))));
+                    .append(Component.newline())
+                    .append(text("Download the new version at: ")
+                            .append(text(DOWNLOAD_PAGE, NamedTextColor.GOLD)
+                                    .hoverEvent(text("Click to open", NamedTextColor.WHITE))
+                                    .clickEvent(ClickEvent.openUrl(DOWNLOAD_PAGE))));
         };
     }
 
-    private static int fetchDistanceFromSiteApi(final ServerBuildInfo build, final int jenkinsBuild) {
+    private static int fetchDistanceFromSiteApi(final String repo, final ServerBuildInfo build, final int jenkinsBuild) {
         try {
-            try (final BufferedReader reader = Resources.asCharSource(
-                URI.create("https://api.purpurmc.org/v2/purpur/" + build.minecraftVersionId()).toURL(), // Purpur - Rebrand
-                Charsets.UTF_8
-            ).openBufferedStream()) {
-                final JsonObject json = new Gson().fromJson(reader, JsonObject.class);
-                //final JsonArray builds = json.getAsJsonArray("builds"); // Purpur - Rebrand
-                final int latest = json.getAsJsonObject("builds").getAsJsonPrimitive("latest").getAsInt(); // Purpur - Rebrand
-                return latest - jenkinsBuild;
+            URL url = URI.create("https://git.varilx.de/api/v1/repos/" + repo + "/releases").toURL();
+            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
+            connection.setRequestMethod("GET");
+            connection.setRequestProperty("Authorization", "token " + ((CraftServer) Bukkit.getServer()).getGiteaToken());
+            connection.setRequestProperty("Accept", "application/json");
+
+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8))) {
+                final JsonArray json = new Gson().fromJson(reader, JsonArray.class);
+                int distance = 0;
+                for (final JsonElement current : json) {
+                    final JsonObject obj = current.getAsJsonObject();
+                    if (obj.get("id").getAsInt() == jenkinsBuild) break;
+                    if (obj.get("prerelease").getAsBoolean()) continue;
+                    distance++;
+                }
+                return distance;
             } catch (final JsonSyntaxException ex) {
-                LOGGER.error("Error parsing json from Purpur's downloads API", ex); // Purpur - Rebrand
+                LOGGER.error("Error parsing json from Giteas's API", ex); // Purpur - Rebrand // Varilx - Rebrand
                 return DISTANCE_ERROR;
             }
         } catch (final IOException e) {
@@ -106,29 +119,6 @@ public class PaperVersionFetcher implements VersionFetcher {
         }
     }
 
-    // Contributed by Techcable <Techcable@outlook.com> in GH-65
-    private static int fetchDistanceFromGitHub(final String repo, final String branch, final String hash) {
-        try {
-            final HttpURLConnection connection = (HttpURLConnection) URI.create("https://api.github.com/repos/%s/compare/%s...%s".formatted(repo, branch, hash)).toURL().openConnection();
-            connection.connect();
-            if (connection.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) return DISTANCE_UNKNOWN; // Unknown commit
-            try (final BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), Charsets.UTF_8))) {
-                final JsonObject obj = new Gson().fromJson(reader, JsonObject.class);
-                final String status = obj.get("status").getAsString();
-                return switch (status) {
-                    case "identical" -> 0;
-                    case "behind" -> obj.get("behind_by").getAsInt();
-                    default -> DISTANCE_ERROR;
-                };
-            } catch (final JsonSyntaxException | NumberFormatException e) {
-                LOGGER.error("Error parsing json from GitHub's API", e);
-                return DISTANCE_ERROR;
-            }
-        } catch (final IOException e) {
-            LOGGER.error("Error while parsing version", e);
-            return DISTANCE_ERROR;
-        }
-    }
 
     private @Nullable Component getHistory() {
         final VersionHistoryManager.@Nullable VersionData data = VersionHistoryManager.INSTANCE.getVersionData();
diff --git a/src/main/java/io/papermc/paper/ServerBuildInfoImpl.java b/src/main/java/io/papermc/paper/ServerBuildInfoImpl.java
index b36e30fd4057a938e4d90cb42a2dca661f16478e..9dc8775c5e2cb548e9c89ee7af4d72ce87b0228f 100644
--- a/src/main/java/io/papermc/paper/ServerBuildInfoImpl.java
+++ b/src/main/java/io/papermc/paper/ServerBuildInfoImpl.java
@@ -62,7 +62,7 @@ public record ServerBuildInfoImpl(
 
     @Override
     public boolean isBrandCompatible(final @NotNull Key brandId) {
-        return brandId.equals(this.brandId) || brandId.equals(BRAND_PAPER_ID); // Purpur - Fix pufferfish issues // Purpur - Rebrand
+        return brandId.equals(this.brandId) || brandId.equals(BRAND_PAPER_ID) || brandId.equals(BRAND_VARILX_ID); // Purpur - Fix pufferfish issues // Purpur - Rebrand // Varilx - Rebrand
     }
 
     @Override
diff --git a/src/main/java/io/papermc/paper/brigadier/NullCommandSender.java b/src/main/java/io/papermc/paper/brigadier/NullCommandSender.java
index 367ef7e0769537e8c13c7fd818a1249e15a28a65..c8fe1ab40ccb35d1d8fb9d2f6fe3e0518b3d1aef 100644
--- a/src/main/java/io/papermc/paper/brigadier/NullCommandSender.java
+++ b/src/main/java/io/papermc/paper/brigadier/NullCommandSender.java
@@ -2,6 +2,8 @@ package io.papermc.paper.brigadier;
 
 import java.util.Set;
 import java.util.UUID;
+
+import de.varilx.core.common.translation.Locale;
 import net.kyori.adventure.text.Component;
 import net.md_5.bungee.api.chat.BaseComponent;
 import org.bukkit.Bukkit;
@@ -25,6 +27,16 @@ public final class NullCommandSender implements CommandSender {
     private NullCommandSender() {
     }
 
+    @Override
+    public void sendTranslatedMessage(@NotNull String key, @NotNull Object... args) {
+
+    }
+
+    @Override
+    public void sendTranslatedMessage(@NotNull String key, @NotNull String project, @NotNull Locale locale, @NotNull Object... args) {
+
+    }
+
     @Override
     public void sendMessage(final String message) {
     }
diff --git a/src/main/java/io/papermc/paper/plugin/PluginInitializerManager.java b/src/main/java/io/papermc/paper/plugin/PluginInitializerManager.java
index 70413fddd23ca1165cb5090cce4fddcb1bbca93f..519f1e6b68c7a79207f8840b7d866cb5b4707274 100644
--- a/src/main/java/io/papermc/paper/plugin/PluginInitializerManager.java
+++ b/src/main/java/io/papermc/paper/plugin/PluginInitializerManager.java
@@ -8,6 +8,8 @@ import io.papermc.paper.plugin.provider.PluginProvider;
 import io.papermc.paper.plugin.provider.type.paper.PaperPluginParent;
 import io.papermc.paper.plugin.provider.type.spigot.SpigotPluginProvider;
 import io.papermc.paper.pluginremap.PluginRemapper;
+
+import java.nio.file.StandardCopyOption;
 import java.util.Set;
 import java.util.TreeSet;
 import java.util.function.Function;
@@ -104,6 +106,26 @@ public class PluginInitializerManager {
     }
 
     public static void load(OptionSet optionSet) throws Exception {
+        // Varilx start - copy plugins from load-plugins
+        LOGGER.info("Copying plugins from load-plugins...");
+        final File topCopyDir = (File) optionSet.valueOf("load-plugins");
+        topCopyDir.mkdirs();
+        for (final File copyPlugin : topCopyDir.listFiles()) {
+            if (copyPlugin.isDirectory()) continue;
+            if (!copyPlugin.getName().endsWith(".jar")) {
+                LOGGER.warn("File {} is not a jar, cannot replace" , copyPlugin);
+                continue;
+            }
+            final File pluginsFolder = new File(copyPlugin.toString().replace("load-plugins", "plugins"));
+
+            Files.copy(copyPlugin.toPath(), pluginsFolder.toPath(), StandardCopyOption.REPLACE_EXISTING);
+            copyPlugin.delete();
+
+            LOGGER.info("Replaced plugin {}", copyPlugin.toPath());
+        }
+        // Varilx end - copy plugins from load-plugins
+
+
         LOGGER.info("Initializing plugins...");
         // We have to load the bukkit configuration inorder to get the update folder location.
         io.papermc.paper.plugin.PluginInitializerManager pluginSystem = io.papermc.paper.plugin.PluginInitializerManager.init(optionSet);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index d067b775b7311631b947fd0faa0dce4129c4a846..5e756d1206b100cb847b3e66a232f68a64c1bbc9 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -13,6 +13,7 @@ import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import com.mojang.serialization.Dynamic;
 import com.mojang.serialization.Lifecycle;
+import de.varilx.core.common.CommonAPI;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import java.awt.image.BufferedImage;
 import java.io.ByteArrayOutputStream;
@@ -41,6 +42,8 @@ import java.util.logging.Logger;
 import java.util.stream.Collectors;
 import javax.imageio.ImageIO;
 // import jline.console.ConsoleReader;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.title.Title;
 import net.minecraft.advancements.AdvancementHolder;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.commands.Commands;
@@ -314,6 +317,7 @@ public final class CraftServer implements Server {
     private final io.papermc.paper.logging.SysoutCatcher sysoutCatcher = new io.papermc.paper.logging.SysoutCatcher(); // Paper
     private final io.papermc.paper.potion.PaperPotionBrewer potionBrewer; // Paper - Custom Potion Mixes
     public final io.papermc.paper.SparksFly spark; // Paper - spark
+    private final CommonAPI commonAPI; // Varilx
 
     // Paper start - Folia region threading API
     private final io.papermc.paper.threadedregions.scheduler.FallbackRegionScheduler regionizedScheduler = new io.papermc.paper.threadedregions.scheduler.FallbackRegionScheduler();
@@ -338,14 +342,14 @@ public final class CraftServer implements Server {
     @Override
     public final boolean isOwnedByCurrentRegion(World world, io.papermc.paper.math.Position position) {
         return ca.spottedleaf.moonrise.common.util.TickThread.isTickThreadFor(
-            ((CraftWorld) world).getHandle(), position.blockX() >> 4, position.blockZ() >> 4
+                ((CraftWorld) world).getHandle(), position.blockX() >> 4, position.blockZ() >> 4
         );
     }
 
     @Override
     public final boolean isOwnedByCurrentRegion(World world, io.papermc.paper.math.Position position, int squareRadiusChunks) {
         return ca.spottedleaf.moonrise.common.util.TickThread.isTickThreadFor(
-            ((CraftWorld) world).getHandle(), position.blockX() >> 4, position.blockZ() >> 4, squareRadiusChunks
+                ((CraftWorld) world).getHandle(), position.blockX() >> 4, position.blockZ() >> 4, squareRadiusChunks
         );
     }
 
@@ -353,7 +357,7 @@ public final class CraftServer implements Server {
     public final boolean isOwnedByCurrentRegion(Location location) {
         World world = location.getWorld();
         return ca.spottedleaf.moonrise.common.util.TickThread.isTickThreadFor(
-            ((CraftWorld) world).getHandle(), location.getBlockX() >> 4, location.getBlockZ() >> 4
+                ((CraftWorld) world).getHandle(), location.getBlockX() >> 4, location.getBlockZ() >> 4
         );
     }
 
@@ -361,28 +365,28 @@ public final class CraftServer implements Server {
     public final boolean isOwnedByCurrentRegion(Location location, int squareRadiusChunks) {
         World world = location.getWorld();
         return ca.spottedleaf.moonrise.common.util.TickThread.isTickThreadFor(
-            ((CraftWorld) world).getHandle(), location.getBlockX() >> 4, location.getBlockZ() >> 4, squareRadiusChunks
+                ((CraftWorld) world).getHandle(), location.getBlockX() >> 4, location.getBlockZ() >> 4, squareRadiusChunks
         );
     }
 
     @Override
     public final boolean isOwnedByCurrentRegion(World world, int chunkX, int chunkZ) {
         return ca.spottedleaf.moonrise.common.util.TickThread.isTickThreadFor(
-            ((CraftWorld) world).getHandle(), chunkX, chunkZ
+                ((CraftWorld) world).getHandle(), chunkX, chunkZ
         );
     }
 
     @Override
     public final boolean isOwnedByCurrentRegion(World world, int chunkX, int chunkZ, int squareRadiusChunks) {
         return ca.spottedleaf.moonrise.common.util.TickThread.isTickThreadFor(
-            ((CraftWorld) world).getHandle(), chunkX, chunkZ, squareRadiusChunks
+                ((CraftWorld) world).getHandle(), chunkX, chunkZ, squareRadiusChunks
         );
     }
 
     @Override
     public final boolean isOwnedByCurrentRegion(World world, int minChunkX, int minChunkZ, int maxChunkX, int maxChunkZ) {
         return ca.spottedleaf.moonrise.common.util.TickThread.isTickThreadFor(
-            ((CraftWorld) world).getHandle(), minChunkX, minChunkZ, maxChunkX, maxChunkZ
+                ((CraftWorld) world).getHandle(), minChunkX, minChunkZ, maxChunkX, maxChunkZ
         );
     }
 
@@ -407,6 +411,8 @@ public final class CraftServer implements Server {
 
     public CraftServer(DedicatedServer console, PlayerList playerList) {
         this.console = console;
+        this.commonAPI = new CommonAPI("varilx");
+        this.commonAPI.enable();
         this.playerList = (DedicatedPlayerList) playerList;
         this.playerView = Collections.unmodifiableList(Lists.transform(playerList.players, new Function<ServerPlayer, CraftPlayer>() {
             @Override
@@ -426,7 +432,7 @@ public final class CraftServer implements Server {
         this.pluginManager = new SimplePluginManager(this, commandMap);
         this.paperPluginManager = new io.papermc.paper.plugin.manager.PaperPluginManagerImpl(this, this.commandMap, pluginManager);
         this.pluginManager.paperPluginManager = this.paperPluginManager;
-         // Paper end
+        // Paper end
         // Purpur start - Language API
         org.purpurmc.purpur.language.Language.setLanguage(new org.purpurmc.purpur.language.Language() {
             private net.minecraft.locale.Language language = net.minecraft.locale.Language.getInstance();
@@ -576,6 +582,125 @@ public final class CraftServer implements Server {
         io.papermc.paper.plugin.entrypoint.LaunchEntryPointHandler.INSTANCE.enter(io.papermc.paper.plugin.entrypoint.Entrypoint.PLUGIN); // Paper - replace implementation
     }
 
+    // Varilx Start
+    
+    // Varilx start - fix version checker
+        public String getGiteaToken() {
+        return this.configuration.getString("gitea-token");
+    }
+    // Varilx end - fix version checker
+
+    @Override
+    public @NotNull Inventory createTranslatedInventory(@org.jetbrains.annotations.Nullable final InventoryHolder owner, final int size, final String titleKey, final Object[] args) {
+        Component title = Bukkit.getVarilxCommon().getTranslationService().getDefaultComponent(titleKey, args);
+        return createInventory(owner, size, title);
+    }
+
+    @Override
+    public @NotNull Inventory createTranslatedInventory(@org.jetbrains.annotations.Nullable final InventoryHolder owner, final int size, final String titleKey, final String project, final Object[] args) {
+        return this.createTranslatedInventory(owner, size, titleKey, project, de.varilx.core.common.translation.Locale.DE, args);
+    }
+
+    @Override
+    public @NotNull Inventory createTranslatedInventory(@org.jetbrains.annotations.Nullable final InventoryHolder owner, final int size, final String titleKey, final String project, final de.varilx.core.common.translation.Locale locale, final Object[] args) {
+        Component title = Bukkit.getVarilxCommon().getTranslationService().getComponent(titleKey, project, de.varilx.core.common.translation.Locale.DE, args);
+        return createInventory(owner, size, title);
+    }
+
+    @Override
+    public @NotNull CommonAPI getVarilxCommon() {
+        return this.commonAPI;
+    }
+
+    @Override
+    public void sendTranslatedMessage(@NotNull final String key, final @NotNull Object... args) {
+        this.sendMessage(Bukkit.getVarilxCommon().getTranslationService().getDefaultComponent(key, args));
+    }
+
+    @Override
+    public void sendTranslatedMessage(@NotNull final String key, @NotNull final String project, final de.varilx.core.common.translation.@NotNull Locale locale, final @NotNull Object... args) {
+        this.sendMessage(Bukkit.getVarilxCommon().getTranslationService().getComponent(key, project, locale, args));
+    }
+
+    @Override
+    public void showTranslatedTitle(@NotNull final String titleKey, final @NotNull Object... args) {
+        this.showTranslatedTitle(titleKey, Title.DEFAULT_TIMES, args);
+    }
+
+    @Override
+    public void showTranslatedTitle(@NotNull final String titleKey, @NotNull final String project, final de.varilx.core.common.translation.@NotNull Locale locale, final @NotNull Object... args) {
+        this.showTranslatedTitle(titleKey, project, locale, Title.DEFAULT_TIMES, args);
+    }
+
+    @Override
+    public void showTranslatedTitle(@NotNull final String titleKey, final Title.@NotNull Times times, final @NotNull Object... args) {
+        final List<net.kyori.adventure.text.Component> components = Bukkit.getVarilxCommon().getTranslationService().getDefaultComponents(titleKey, args);
+        this.showTitle(Title.title(components.getFirst(), components.getLast(), times));
+    }
+
+    @Override
+    public void showTranslatedTitle(@NotNull final String titleKey, @NotNull final String project, final Title.@NotNull Times times, final @NotNull Object... args) {
+        this.showTranslatedTitle(titleKey, project, de.varilx.core.common.translation.Locale.DE, Title.DEFAULT_TIMES, args);
+    }
+
+    @Override
+    public void showTranslatedTitle(@NotNull final String titleKey, @NotNull final String project, final de.varilx.core.common.translation.@NotNull Locale locale, final Title.@NotNull Times times, final @NotNull Object... args) {
+        final List<net.kyori.adventure.text.Component> components = Bukkit.getVarilxCommon().getTranslationService().getComponents(titleKey, project, locale, args);
+        this.showTitle(Title.title(components.getFirst(), components.getLast(), times));
+    }
+
+    @Override
+    public void showTranslatedBossbar(final String bossbarKey, final Object... args) {
+        net.kyori.adventure.text.Component title = Bukkit.getVarilxCommon().getTranslationService().getDefaultComponent(bossbarKey, (Object[]) args);
+        this.showBossBar(net.kyori.adventure.bossbar.BossBar.bossBar(title, 0f, net.kyori.adventure.bossbar.BossBar.Color.GREEN, net.kyori.adventure.bossbar.BossBar.Overlay.PROGRESS));
+    }
+
+    @Override
+    public void showTranslatedBossbar(final String bossbarKey, final net.kyori.adventure.bossbar.BossBar bossBar, final Object... args) {
+        net.kyori.adventure.text.Component title = Bukkit.getVarilxCommon().getTranslationService().getDefaultComponent(bossbarKey, (Object[]) args);
+        bossBar.name(title);
+        this.showBossBar(bossBar);
+    }
+
+    @Override
+    public void showTranslatedBossbar(final String bossbarKey, final String project, final net.kyori.adventure.bossbar.BossBar bossBar, final Object... args) {
+        this.showTranslatedBossbar(bossbarKey, project, de.varilx.core.common.translation.Locale.DE, bossBar, args);
+    }
+
+    @Override
+    public void showTranslatedBossbar(final String bossbarKey, final String project, final de.varilx.core.common.translation.Locale locale, final net.kyori.adventure.bossbar.BossBar bossBar, final Object... args) {
+        net.kyori.adventure.text.Component title = Bukkit.getVarilxCommon().getTranslationService().getComponent(bossbarKey, project, locale, (Object[]) args);
+        bossBar.name(title);
+        this.showBossBar(bossBar);
+    }
+
+    @Override
+    public void sendTranslatedActionBar(final String messageKey, final Object... args) {
+        this.sendActionBar(Bukkit.getVarilxCommon().getTranslationService().getDefaultComponent(messageKey, args));
+    }
+
+    @Override
+    public void sendTranslatedActionBar(final String messageKey, final String project, final de.varilx.core.common.translation.Locale locale, final Object... args) {
+        this.sendActionBar(Bukkit.getVarilxCommon().getTranslationService().getComponent(messageKey, project, locale, args));
+    }
+
+    @Override
+    public int translatedBroadcast(@NotNull final String messageKey, final @NotNull Object[] args) {
+        return this.broadcast(Bukkit.getVarilxCommon().getTranslationService().getDefaultComponent(messageKey, args));
+    }
+
+    @Override
+    public int translatedBroadcast(@NotNull final String messageKey, @NotNull final String project, final @NotNull Object[] args) {
+        return this.translatedBroadcast(messageKey, project, de.varilx.core.common.translation.Locale.DE, args);
+    }
+
+    @Override
+    public int translatedBroadcast(@NotNull final String messageKey, @NotNull final String project, final de.varilx.core.common.translation.@NotNull Locale locale, final @NotNull Object[] args) {
+        return this.broadcast(Bukkit.getVarilxCommon().getTranslationService().getComponent(messageKey, project, locale, args));
+    }
+
+    // Varilx End
+
     // Paper start
     @Override
     public File getPluginsFolder() {
@@ -662,7 +787,7 @@ public final class CraftServer implements Server {
                     permsToLoad.add(perm);
                 } else {
                     this.getLogger().log(Level.WARNING, "Plugin " + plugin.getDescription().getFullName() + " tried to register permission '" + perm.getName() + "' but it's already registered");
-                // Paper end
+                    // Paper end
                 }
             }
             this.paperPluginManager.addPermissions(permsToLoad); // Paper
@@ -1153,10 +1278,10 @@ public final class CraftServer implements Server {
         for (BukkitWorker worker : overdueWorkers) {
             Plugin plugin = worker.getOwner();
             this.getLogger().log(Level.SEVERE, String.format(
-                "Nag author(s): '%s' of '%s' about the following: %s",
-                plugin.getDescription().getAuthors(),
-                plugin.getDescription().getFullName(),
-                "This plugin is not properly shutting down its async tasks when it is being reloaded.  This may cause conflicts with the newly loaded version of the plugin"
+                    "Nag author(s): '%s' of '%s' about the following: %s",
+                    plugin.getDescription().getAuthors(),
+                    plugin.getDescription().getFullName(),
+                    "This plugin is not properly shutting down its async tasks when it is being reloaded.  This may cause conflicts with the newly loaded version of the plugin"
             ));
             if (console.isDebugging()) io.papermc.paper.util.TraceUtil.dumpTraceForThread(worker.getThread(), "still running"); // Paper - Debugging
         }
@@ -1192,10 +1317,10 @@ public final class CraftServer implements Server {
         for (BukkitWorker worker : overdueWorkers) {
             Plugin plugin = worker.getOwner();
             getLogger().log(Level.SEVERE, String.format(
-                "Nag author(s): '%s' of '%s' about the following: %s",
-                plugin.getPluginMeta().getAuthors(),
-                plugin.getPluginMeta().getDisplayName(),
-                "This plugin is not properly shutting down its async tasks when it is being shut down. This task may throw errors during the final shutdown logs and might not complete before process dies."
+                    "Nag author(s): '%s' of '%s' about the following: %s",
+                    plugin.getPluginMeta().getAuthors(),
+                    plugin.getPluginMeta().getDisplayName(),
+                    "This plugin is not properly shutting down its async tasks when it is being shut down. This task may throw errors during the final shutdown logs and might not complete before process dies."
             ));
             if (console.isDebugging()) io.papermc.paper.util.TraceUtil.dumpTraceForThread(worker.getThread(), "still running"); // Paper - Debugging
         }
@@ -1364,9 +1489,9 @@ public final class CraftServer implements Server {
                 } catch (NbtException | ReportedNbtException | IOException e1) {
                     MinecraftServer.LOGGER.error("Failed to load world data from {}", levelDirectory.oldDataFile(), e1);
                     MinecraftServer.LOGGER.error(
-                        "Failed to load world data from {} and {}. World files may be corrupted. Shutting down.",
-                        levelDirectory.dataFile(),
-                        levelDirectory.oldDataFile()
+                            "Failed to load world data from {} and {}. World files may be corrupted. Shutting down.",
+                            levelDirectory.dataFile(),
+                            levelDirectory.oldDataFile()
                     );
                     return null;
                 }
@@ -1395,7 +1520,7 @@ public final class CraftServer implements Server {
         net.minecraft.core.Registry<LevelStem> contextLevelStemRegistry = registryAccess.lookupOrThrow(Registries.LEVEL_STEM);
         if (dataTag != null) {
             LevelDataAndDimensions levelDataAndDimensions = LevelStorageSource.getLevelDataAndDimensions(
-                dataTag, context.dataConfiguration(), contextLevelStemRegistry, context.datapackWorldgen()
+                    dataTag, context.dataConfiguration(), contextLevelStemRegistry, context.datapackWorldgen()
             );
             primaryLevelData = (PrimaryLevelData) levelDataAndDimensions.worldData();
             registryAccess = levelDataAndDimensions.dimensions().dimensionsRegistryAccess();
@@ -1406,12 +1531,12 @@ public final class CraftServer implements Server {
 
             DedicatedServerProperties.WorldDimensionData properties = new DedicatedServerProperties.WorldDimensionData(GsonHelper.parse((creator.generatorSettings().isEmpty()) ? "{}" : creator.generatorSettings()), creator.type().name().toLowerCase(Locale.ROOT));
             levelSettings = new LevelSettings(
-                name,
-                GameType.byId(this.getDefaultGameMode().getValue()),
-                hardcore, Difficulty.EASY,
-                false,
-                new GameRules(context.dataConfiguration().enabledFeatures()),
-                context.dataConfiguration())
+                    name,
+                    GameType.byId(this.getDefaultGameMode().getValue()),
+                    hardcore, Difficulty.EASY,
+                    false,
+                    new GameRules(context.dataConfiguration().enabledFeatures()),
+                    context.dataConfiguration())
             ;
             worldDimensions = properties.create(context.datapackWorldgen());
 
@@ -1433,7 +1558,7 @@ public final class CraftServer implements Server {
 
         long i = BiomeManager.obfuscateSeed(primaryLevelData.worldGenOptions().seed());
         List<CustomSpawner> list = ImmutableList.of(
-            new PhantomSpawner(), new PatrolSpawner(), new CatSpawner(), new VillageSiege(), new WanderingTraderSpawner(primaryLevelData)
+                new PhantomSpawner(), new PatrolSpawner(), new CatSpawner(), new VillageSiege(), new WanderingTraderSpawner(primaryLevelData)
         );
         LevelStem customStem = contextLevelStemRegistry.getValue(actualDimension);
 
@@ -1458,20 +1583,20 @@ public final class CraftServer implements Server {
         }
 
         ServerLevel serverLevel = new ServerLevel(
-            this.console,
-            this.console.executor,
-            levelStorageAccess,
-            primaryLevelData,
-            dimensionKey,
-            customStem,
-            this.getServer().progressListenerFactory.create(primaryLevelData.getGameRules().getInt(GameRules.RULE_SPAWN_CHUNK_RADIUS)),
-            primaryLevelData.isDebugWorld(),
-            i,
-            creator.environment() == Environment.NORMAL ? list : ImmutableList.of(),
-            true,
-            this.console.overworld().getRandomSequences(),
-            creator.environment(),
-            chunkGenerator, biomeProvider
+                this.console,
+                this.console.executor,
+                levelStorageAccess,
+                primaryLevelData,
+                dimensionKey,
+                customStem,
+                this.getServer().progressListenerFactory.create(primaryLevelData.getGameRules().getInt(GameRules.RULE_SPAWN_CHUNK_RADIUS)),
+                primaryLevelData.isDebugWorld(),
+                i,
+                creator.environment() == Environment.NORMAL ? list : ImmutableList.of(),
+                true,
+                this.console.overworld().getRandomSequences(),
+                creator.environment(),
+                chunkGenerator, biomeProvider
         );
 
         if (!(this.worlds.containsKey(name.toLowerCase(Locale.ROOT)))) {
@@ -2362,13 +2487,13 @@ public final class CraftServer implements Server {
     @Override
     public <B extends BanList<E>, E> B getBanList(final io.papermc.paper.ban.BanListType<B> type) {
         Preconditions.checkArgument(type != null, "BanList.BanType cannot be null");
-       if (type == io.papermc.paper.ban.BanListType.IP) {
-           return (B) new CraftIpBanList(this.playerList.getIpBans());
-       } else if (type == io.papermc.paper.ban.BanListType.PROFILE) {
-          return (B) new CraftProfileBanList(this.playerList.getBans());
-       } else {
-           throw new IllegalArgumentException("Unknown BanListType: " + type);
-       }
+        if (type == io.papermc.paper.ban.BanListType.IP) {
+            return (B) new CraftIpBanList(this.playerList.getIpBans());
+        } else if (type == io.papermc.paper.ban.BanListType.PROFILE) {
+            return (B) new CraftProfileBanList(this.playerList.getBans());
+        } else {
+            throw new IllegalArgumentException("Unknown BanListType: " + type);
+        }
     }
     // Paper end - add BanListType (which has a generic)
 
@@ -3167,10 +3292,10 @@ public final class CraftServer implements Server {
     @Override
     public double[] getTPS() {
         return new double[] {
-            net.minecraft.server.MinecraftServer.getServer().tps5s.getAverage(), // Purpur - Add 5 second tps average in /tps
-            net.minecraft.server.MinecraftServer.getServer().tps1.getAverage(),
-            net.minecraft.server.MinecraftServer.getServer().tps5.getAverage(),
-            net.minecraft.server.MinecraftServer.getServer().tps15.getAverage()
+                net.minecraft.server.MinecraftServer.getServer().tps5s.getAverage(), // Purpur - Add 5 second tps average in /tps
+                net.minecraft.server.MinecraftServer.getServer().tps1.getAverage(),
+                net.minecraft.server.MinecraftServer.getServer().tps5.getAverage(),
+                net.minecraft.server.MinecraftServer.getServer().tps15.getAverage()
         };
     }
 
@@ -3393,3 +3518,4 @@ public final class CraftServer implements Server {
     }
     // Purpur end - Lagging threshold
 }
+
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 90fb036607e752fcf43575be4f03bbf00bbb05c7..6349a020a21874233e0424f879fac2db6b2f18f6 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -190,6 +190,14 @@ public class Main {
                         .defaultsTo("Unknown Server")
                         .describedAs("Name");
                 // Paper end
+
+                // Varilx start - Copy plugins before startup, to keep ClassNotFoundExceptions out of the way
+                accepts("load-plugins")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("load-plugins"))
+                        .describedAs("Loaded plugins before startup");
+                // Varilx end - Copy plugins before startup, to keep ClassNotFoundExceptions out of the way
             }
         };
 
diff --git a/src/main/java/org/bukkit/craftbukkit/command/ProxiedNativeCommandSender.java b/src/main/java/org/bukkit/craftbukkit/command/ProxiedNativeCommandSender.java
index 3e7d14564f11a3ed0b0766444e9d681804597e9a..a749675e27ffe4493730b6044ea45b855901a80d 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/ProxiedNativeCommandSender.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/ProxiedNativeCommandSender.java
@@ -2,6 +2,8 @@ package org.bukkit.craftbukkit.command;
 
 import java.util.Set;
 import java.util.UUID;
+
+import de.varilx.core.common.translation.Locale;
 import net.minecraft.commands.CommandSourceStack;
 import org.bukkit.Server;
 import org.bukkit.command.CommandSender;
@@ -10,6 +12,7 @@ import org.bukkit.permissions.Permission;
 import org.bukkit.permissions.PermissionAttachment;
 import org.bukkit.permissions.PermissionAttachmentInfo;
 import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
 
 public class ProxiedNativeCommandSender implements ProxiedCommandSender {
 
@@ -37,6 +40,16 @@ public class ProxiedNativeCommandSender implements ProxiedCommandSender {
         return this.callee;
     }
 
+    @Override
+    public void sendTranslatedMessage(@NotNull String key, @NotNull Object... args) {
+
+    }
+
+    @Override
+    public void sendTranslatedMessage(@NotNull String key, @NotNull String project, @NotNull Locale locale, @NotNull Object... args) {
+
+    }
+
     @Override
     public void sendMessage(String message) {
         this.getCaller().sendMessage(message);
diff --git a/src/main/java/org/bukkit/craftbukkit/command/ServerCommandSender.java b/src/main/java/org/bukkit/craftbukkit/command/ServerCommandSender.java
index 1e3091687735b461d3b6a313ab8761127981d3e8..be7ceabe64306e705c416d4cd76779f676f47fcc 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/ServerCommandSender.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/ServerCommandSender.java
@@ -2,6 +2,8 @@ package org.bukkit.craftbukkit.command;
 
 import java.util.Set;
 import java.util.UUID;
+
+import de.varilx.core.common.translation.Locale;
 import org.bukkit.Bukkit;
 import org.bukkit.Server;
 import org.bukkit.command.CommandSender;
@@ -23,6 +25,23 @@ public abstract class ServerCommandSender implements CommandSender {
         this.perm = perm;
     }
 
+
+    // Varilx - Start
+
+
+    @Override
+    public void sendTranslatedMessage(final String key, final Object... args) {
+
+    }
+
+
+    @Override
+    public void sendTranslatedMessage(final String key, final String project, final Locale locale, final Object... args) {
+
+    }
+
+    // Varilx - End
+
     @Override
     public boolean isPermissionSet(String name) {
         return this.perm.isPermissionSet(name);
@@ -137,12 +156,13 @@ public abstract class ServerCommandSender implements CommandSender {
     public net.kyori.adventure.pointer.Pointers pointers() {
         if (this.adventure$pointers == null) {
             this.adventure$pointers = net.kyori.adventure.pointer.Pointers.builder()
-                .withDynamic(net.kyori.adventure.identity.Identity.DISPLAY_NAME, this::name)
-                .withStatic(net.kyori.adventure.permission.PermissionChecker.POINTER, this::permissionValue)
-                .build();
+                    .withDynamic(net.kyori.adventure.identity.Identity.DISPLAY_NAME, this::name)
+                    .withStatic(net.kyori.adventure.permission.PermissionChecker.POINTER, this::permissionValue)
+                    .build();
         }
 
         return this.adventure$pointers;
     }
     // Paper end
 }
+
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 8755fc950af21e076858de7aafe3b562982299cf..b6400f1814fc3b9fd4b710d01a47075d41fd5d89 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -8,6 +8,8 @@ import com.google.common.collect.Lists;
 import java.util.List;
 import java.util.Set;
 import java.util.UUID;
+
+import de.varilx.core.common.translation.Locale;
 import io.papermc.paper.entity.LookAnchor;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.Tag;
@@ -24,11 +26,7 @@ import net.minecraft.world.entity.projectile.AbstractArrow;
 import net.minecraft.world.level.portal.TeleportTransition;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
-import org.bukkit.EntityEffect;
-import org.bukkit.Location;
-import org.bukkit.Server;
-import org.bukkit.Sound;
-import org.bukkit.World;
+import org.bukkit.*;
 import org.bukkit.block.BlockFace;
 import org.bukkit.block.PistonMoveReaction;
 import org.bukkit.craftbukkit.CraftServer;
@@ -89,6 +87,23 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         this.entityType = CraftEntityType.minecraftToBukkit(entity.getType());
     }
 
+
+    // Varilx - Start
+
+
+    @Override
+    public void sendTranslatedMessage(final String key, final Object... args) {
+        this.sendMessage(Bukkit.getVarilxCommon().getTranslationService().getDefaultComponent(key, args));
+    }
+
+
+    @Override
+    public void sendTranslatedMessage(final String key, final String project, final Locale locale, Object... args) {
+        this.sendMessage(Bukkit.getVarilxCommon().getTranslationService().getComponent(key, project, locale, args));
+    }
+
+    // Varilx - End
+
     // Purpur start - Fire Immunity API
     @Override
     public boolean isImmuneToFire() {
@@ -268,7 +283,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         // Don't allow teleporting between worlds while keeping passengers
         if (flagSet.contains(io.papermc.paper.entity.TeleportFlag.EntityState.RETAIN_PASSENGERS) && this.entity.isVehicle() && location.getWorld() != this.getWorld()) {
             if (!new org.purpurmc.purpur.event.entity.EntityTeleportHinderedEvent(entity.getBukkitEntity(), org.purpurmc.purpur.event.entity.EntityTeleportHinderedEvent.Reason.IS_VEHICLE, cause).callEvent()) // Purpur - Add EntityTeleportHinderedEvent
-            return false;
+                return false;
         }
 
         // Don't allow to teleport between worlds if remaining on vehicle
@@ -283,7 +298,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
 
         // Paper start - fix teleport event not being called
         org.bukkit.event.entity.EntityTeleportEvent event = new org.bukkit.event.entity.EntityTeleportEvent(
-            this, this.getLocation(), location);
+                this, this.getLocation(), location);
         // cancelling the event is handled differently for players and entities,
         // entities just stop teleporting, players will still teleport to the "from" location of the event
         if (!event.callEvent() || event.getTo() == null) {
@@ -671,10 +686,10 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     public net.kyori.adventure.pointer.Pointers pointers() {
         if (this.adventure$pointers == null) {
             this.adventure$pointers = net.kyori.adventure.pointer.Pointers.builder()
-                .withDynamic(net.kyori.adventure.identity.Identity.DISPLAY_NAME, this::name)
-                .withDynamic(net.kyori.adventure.identity.Identity.UUID, this::getUniqueId)
-                .withStatic(net.kyori.adventure.permission.PermissionChecker.POINTER, this::permissionValue)
-                .build();
+                    .withDynamic(net.kyori.adventure.identity.Identity.DISPLAY_NAME, this::name)
+                    .withDynamic(net.kyori.adventure.identity.Identity.UUID, this::getUniqueId)
+                    .withStatic(net.kyori.adventure.permission.PermissionChecker.POINTER, this::permissionValue)
+                    .build();
         }
 
         return this.adventure$pointers;
@@ -1103,23 +1118,23 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         java.util.concurrent.CompletableFuture<Boolean> ret = new java.util.concurrent.CompletableFuture<>();
 
         world.loadChunksForMoveAsync(getHandle().getBoundingBoxAt(locationClone.getX(), locationClone.getY(), locationClone.getZ()),
-            this instanceof CraftPlayer ? ca.spottedleaf.concurrentutil.util.Priority.HIGHER : ca.spottedleaf.concurrentutil.util.Priority.NORMAL, (list) -> {
-                net.minecraft.server.MinecraftServer.getServer().scheduleOnMain(() -> {
-                    final net.minecraft.server.level.ServerChunkCache chunkCache = world.getChunkSource();
-                    for (final net.minecraft.world.level.chunk.ChunkAccess chunk : list) {
-                        chunkCache.addTicketAtLevel(net.minecraft.server.level.TicketType.POST_TELEPORT, chunk.getPos(), 33, CraftEntity.this.getEntityId());
-                    }
-                    try {
-                        ret.complete(CraftEntity.this.teleport(locationClone, cause, teleportFlags) ? Boolean.TRUE : Boolean.FALSE);
-                    } catch (Throwable throwable) {
-                        if (throwable instanceof ThreadDeath) {
-                            throw (ThreadDeath)throwable;
+                this instanceof CraftPlayer ? ca.spottedleaf.concurrentutil.util.Priority.HIGHER : ca.spottedleaf.concurrentutil.util.Priority.NORMAL, (list) -> {
+                    net.minecraft.server.MinecraftServer.getServer().scheduleOnMain(() -> {
+                        final net.minecraft.server.level.ServerChunkCache chunkCache = world.getChunkSource();
+                        for (final net.minecraft.world.level.chunk.ChunkAccess chunk : list) {
+                            chunkCache.addTicketAtLevel(net.minecraft.server.level.TicketType.POST_TELEPORT, chunk.getPos(), 33, CraftEntity.this.getEntityId());
+                        }
+                        try {
+                            ret.complete(CraftEntity.this.teleport(locationClone, cause, teleportFlags) ? Boolean.TRUE : Boolean.FALSE);
+                        } catch (Throwable throwable) {
+                            if (throwable instanceof ThreadDeath) {
+                                throw (ThreadDeath)throwable;
+                            }
+                            net.minecraft.server.MinecraftServer.LOGGER.error("Failed to teleport entity " + CraftEntity.this, throwable);
+                            ret.completeExceptionally(throwable);
                         }
-                        net.minecraft.server.MinecraftServer.LOGGER.error("Failed to teleport entity " + CraftEntity.this, throwable);
-                        ret.completeExceptionally(throwable);
-                    }
+                    });
                 });
-            });
 
         return ret;
     }
@@ -1376,3 +1391,4 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     }
     // Purpur end - Ridables
 }
+
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 9fbbdc9664353fd2be8eae112e5cfe8880d51d08..ed5016f1ecd12009c33b4b1174233b90f5ab1004 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -5,6 +5,7 @@ import com.google.common.collect.ImmutableSet;
 import com.google.common.io.BaseEncoding;
 import com.mojang.authlib.GameProfile;
 import com.mojang.datafixers.util.Pair;
+import de.varilx.core.common.translation.Locale;
 import io.netty.buffer.Unpooled;
 import io.papermc.paper.FeatureHooks;
 import io.papermc.paper.entity.LookAnchor;
@@ -38,6 +39,9 @@ import java.util.logging.Level;
 import java.util.logging.Logger;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
+
+import net.kyori.adventure.bossbar.BossBar;
+import net.kyori.adventure.title.Title;
 import net.minecraft.advancements.AdvancementProgress;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Holder;
@@ -233,13 +237,80 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     @Override
     public void remove() {
         if (this.getHandle().getClass().equals(ServerPlayer.class)) { // special case for NMS plugins inheriting
-        // Will lead to an inconsistent player state if we remove the player as any other entity.
-        throw new UnsupportedOperationException(String.format("Cannot remove player %s, use Player#kickPlayer(String) instead.", this.getName()));
+            // Will lead to an inconsistent player state if we remove the player as any other entity.
+            throw new UnsupportedOperationException(String.format("Cannot remove player %s, use Player#kickPlayer(String) instead.", this.getName()));
         } else {
             super.remove();
         }
     }
 
+    // Varilx - Start
+
+    @Override
+    public void showTranslatedTitle(@NotNull final String titleKey, final @NotNull Object... args) {
+        this.showTranslatedTitle(titleKey, Title.DEFAULT_TIMES, args);
+    }
+
+    @Override
+    public void showTranslatedTitle(@NotNull final String titleKey, @NotNull final String project, @NotNull final Locale locale, final @NotNull Object... args) {
+        this.showTranslatedTitle(titleKey, project, locale, Title.DEFAULT_TIMES, args);
+    }
+
+    @Override
+    public void showTranslatedTitle(@NotNull final String titleKey, final Title.@NotNull Times times, final @NotNull Object... args) {
+        final List<net.kyori.adventure.text.Component> components = Bukkit.getVarilxCommon().getTranslationService().getDefaultComponents(titleKey, args);
+        this.showTitle(Title.title(components.getFirst(), components.getLast(), times));
+    }
+
+    @Override
+    public void showTranslatedTitle(@NotNull final String titleKey, @NotNull final String project, final Title.@NotNull Times times, final @NotNull Object... args) {
+        this.showTranslatedTitle(titleKey, project, Locale.DE, times, args);
+    }
+
+    @Override
+    public void showTranslatedTitle(@NotNull final String titleKey, @NotNull final String project, @NotNull final Locale locale, final Title.@NotNull Times times, final @NotNull Object... args) {
+        final List<net.kyori.adventure.text.Component> components = Bukkit.getVarilxCommon().getTranslationService().getComponents(titleKey, project, locale, args);
+        this.showTitle(Title.title(components.getFirst(), components.getLast(), times));
+    }
+
+    @Override
+    public void showTranslatedBossbar(final String bossbarKey, final Object... args) {
+        net.kyori.adventure.text.Component title = Bukkit.getVarilxCommon().getTranslationService().getDefaultComponent(bossbarKey, (Object[]) args);
+        this.showBossBar(BossBar.bossBar(title, 0f, BossBar.Color.GREEN, BossBar.Overlay.PROGRESS));
+    }
+
+    @Override
+    public void showTranslatedBossbar(final String bossbarKey, final BossBar bossBar, final Object... args) {
+        net.kyori.adventure.text.Component title = Bukkit.getVarilxCommon().getTranslationService().getDefaultComponent(bossbarKey, (Object[]) args);
+        bossBar.name(title);
+        this.showBossBar(bossBar);
+    }
+
+    @Override
+    public void showTranslatedBossbar(final String bossbarKey, final String project, final BossBar bossBar, final Object... args) {
+        this.showTranslatedBossbar(bossbarKey, project, Locale.DE, bossBar, args);
+    }
+
+    @Override
+    public void showTranslatedBossbar(final String bossbarKey, final String project, final Locale locale, final BossBar bossBar, final Object... args) {
+        net.kyori.adventure.text.Component title = Bukkit.getVarilxCommon().getTranslationService().getComponent(bossbarKey, project, locale, (Object[]) args);
+        bossBar.name(title);
+        this.showBossBar(bossBar);
+    }
+
+    @Override
+    public void sendTranslatedActionBar(final String messageKey, final Object... args) {
+        this.sendActionBar(Bukkit.getVarilxCommon().getTranslationService().getDefaultComponent(messageKey, args));
+    }
+
+
+    @Override
+    public void sendTranslatedActionBar(final String messageKey, final String project, final Locale locale, final Object... args) {
+        this.sendActionBar(Bukkit.getVarilxCommon().getTranslationService().getComponent(messageKey, project, locale, args));
+    }
+
+    // Varilx - End
+
     @Override
     public boolean isOp() {
         return this.server.getHandle().isOp(this.getProfile());
@@ -453,21 +524,21 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void setPlayerListHeaderFooter(BaseComponent[] header, BaseComponent[] footer) {
-         if (header != null) {
-             String headerJson = net.md_5.bungee.chat.ComponentSerializer.toString(header);
-             playerListHeader = net.kyori.adventure.text.serializer.gson.GsonComponentSerializer.gson().deserialize(headerJson);
-         } else {
-             playerListHeader = null;
-         }
+        if (header != null) {
+            String headerJson = net.md_5.bungee.chat.ComponentSerializer.toString(header);
+            playerListHeader = net.kyori.adventure.text.serializer.gson.GsonComponentSerializer.gson().deserialize(headerJson);
+        } else {
+            playerListHeader = null;
+        }
 
         if (footer != null) {
-             String footerJson = net.md_5.bungee.chat.ComponentSerializer.toString(footer);
-             playerListFooter = net.kyori.adventure.text.serializer.gson.GsonComponentSerializer.gson().deserialize(footerJson);
+            String footerJson = net.md_5.bungee.chat.ComponentSerializer.toString(footer);
+            playerListFooter = net.kyori.adventure.text.serializer.gson.GsonComponentSerializer.gson().deserialize(footerJson);
         } else {
-             playerListFooter = null;
-         }
+            playerListFooter = null;
+        }
 
-         updatePlayerListHeaderFooter();
+        updatePlayerListHeaderFooter();
     }
 
     @Override
@@ -734,16 +805,16 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     @Override
     public void addAdditionalChatCompletions(@NotNull Collection<String> completions) {
         this.getHandle().connection.send(new net.minecraft.network.protocol.game.ClientboundCustomChatCompletionsPacket(
-            net.minecraft.network.protocol.game.ClientboundCustomChatCompletionsPacket.Action.ADD,
-            new ArrayList<>(completions)
+                net.minecraft.network.protocol.game.ClientboundCustomChatCompletionsPacket.Action.ADD,
+                new ArrayList<>(completions)
         ));
     }
 
     @Override
     public void removeAdditionalChatCompletions(@NotNull Collection<String> completions) {
         this.getHandle().connection.send(new net.minecraft.network.protocol.game.ClientboundCustomChatCompletionsPacket(
-            net.minecraft.network.protocol.game.ClientboundCustomChatCompletionsPacket.Action.REMOVE,
-            new ArrayList<>(completions)
+                net.minecraft.network.protocol.game.ClientboundCustomChatCompletionsPacket.Action.REMOVE,
+                new ArrayList<>(completions)
         ));
     }
     // Paper end - custom chat completions API
@@ -1432,7 +1503,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         // Don't allow teleporting between worlds while keeping passengers
         if (ignorePassengers && entity.isVehicle() && location.getWorld() != this.getWorld()) {
             if (!new org.purpurmc.purpur.event.entity.EntityTeleportHinderedEvent(entity.getBukkitEntity(), org.purpurmc.purpur.event.entity.EntityTeleportHinderedEvent.Reason.IS_VEHICLE, cause).callEvent()) // Purpur - Add EntityTeleportHinderedEvent
-            return false;
+                return false;
         }
 
         // Don't allow to teleport between worlds if remaining on vehicle
@@ -1454,7 +1525,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
         if (entity.isVehicle() && !ignorePassengers) { // Paper - Teleport API
             if (!new org.purpurmc.purpur.event.entity.EntityTeleportHinderedEvent(entity.getBukkitEntity(), org.purpurmc.purpur.event.entity.EntityTeleportHinderedEvent.Reason.IS_VEHICLE, cause).callEvent()) // Purpur - Add EntityTeleportHinderedEvent
-            return false;
+                return false;
         }
 
         // From = Players current Location
@@ -1499,7 +1570,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
                 nms.add(deltaRelativeToNMS(bukkit));
             }
             entity.connection.internalTeleport(new net.minecraft.world.entity.PositionMoveRotation(
-                io.papermc.paper.util.MCUtil.toVec3(to), net.minecraft.world.phys.Vec3.ZERO, to.getYaw(), to.getPitch()
+                    io.papermc.paper.util.MCUtil.toVec3(to), net.minecraft.world.phys.Vec3.ZERO, to.getYaw(), to.getPitch()
             ), nms);
             // Paper end - Teleport API
         } else {
@@ -1873,7 +1944,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         // Logic copied from EntityExperienceOrb and remapped to unobfuscated methods/properties
 
         final Optional<net.minecraft.world.item.enchantment.EnchantedItemInUse> stackEntry = net.minecraft.world.item.enchantment.EnchantmentHelper
-            .getRandomItemWith(net.minecraft.world.item.enchantment.EnchantmentEffectComponents.REPAIR_WITH_XP, handle, net.minecraft.world.item.ItemStack::isDamaged);
+                .getRandomItemWith(net.minecraft.world.item.enchantment.EnchantmentEffectComponents.REPAIR_WITH_XP, handle, net.minecraft.world.item.ItemStack::isDamaged);
         final net.minecraft.world.item.ItemStack itemstack = stackEntry.map(net.minecraft.world.item.enchantment.EnchantedItemInUse::itemStack).orElse(net.minecraft.world.item.ItemStack.EMPTY);
         if (!itemstack.isEmpty() && itemstack.getItem().components().has(net.minecraft.core.component.DataComponents.MAX_DAMAGE)) {
             net.minecraft.world.entity.ExperienceOrb orb = net.minecraft.world.entity.EntityType.EXPERIENCE_ORB.create(handle.level(), net.minecraft.world.entity.EntitySpawnReason.COMMAND);
@@ -1882,7 +1953,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
             orb.setPosRaw(handle.getX(), handle.getY(), handle.getZ());
 
             final int possibleDurabilityFromXp = net.minecraft.world.item.enchantment.EnchantmentHelper.modifyDurabilityToRepairFromXp(
-                handle.serverLevel(), itemstack, amount
+                    handle.serverLevel(), itemstack, amount
             );
             int i = Math.min(possibleDurabilityFromXp, itemstack.getDamageValue());
             final int consumedExperience = i > 0 ? i * amount / possibleDurabilityFromXp : possibleDurabilityFromXp; // Paper - taken from ExperienceOrb#repairPlayerItems + prevent division by 0
@@ -1902,7 +1973,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         if (applyMending) {
             exp = this.applyMending(exp);
         }
-    // Paper end - ability to apply mending
+        // Paper end - ability to apply mending
         this.getHandle().giveExperiencePoints(exp);
     }
 
@@ -3126,9 +3197,9 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         net.minecraft.core.Registry<net.minecraft.network.chat.ChatType> chatTypeRegistry = this.getHandle().level().registryAccess().lookupOrThrow(net.minecraft.core.registries.Registries.CHAT_TYPE);
 
         return new net.minecraft.network.chat.ChatType.Bound(
-            chatTypeRegistry.getOrThrow(net.minecraft.resources.ResourceKey.create(net.minecraft.core.registries.Registries.CHAT_TYPE, io.papermc.paper.adventure.PaperAdventure.asVanilla(boundChatType.type().key()))),
-            io.papermc.paper.adventure.PaperAdventure.asVanilla(boundChatType.name()),
-            Optional.ofNullable(io.papermc.paper.adventure.PaperAdventure.asVanilla(boundChatType.target()))
+                chatTypeRegistry.getOrThrow(net.minecraft.resources.ResourceKey.create(net.minecraft.core.registries.Registries.CHAT_TYPE, io.papermc.paper.adventure.PaperAdventure.asVanilla(boundChatType.type().key()))),
+                io.papermc.paper.adventure.PaperAdventure.asVanilla(boundChatType.name()),
+                Optional.ofNullable(io.papermc.paper.adventure.PaperAdventure.asVanilla(boundChatType.target()))
         );
     }
 
@@ -3202,8 +3273,8 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         final ServerGamePacketListenerImpl connection = this.getHandle().connection;
         if (connection == null) return;
         final ClientboundTabListPacket packet = new ClientboundTabListPacket(
-            io.papermc.paper.adventure.PaperAdventure.asVanillaNullToEmpty(this.playerListHeader),
-            io.papermc.paper.adventure.PaperAdventure.asVanillaNullToEmpty(this.playerListFooter)
+                io.papermc.paper.adventure.PaperAdventure.asVanillaNullToEmpty(this.playerListHeader),
+                io.papermc.paper.adventure.PaperAdventure.asVanillaNullToEmpty(this.playerListFooter)
         );
         connection.send(packet);
     }
@@ -3310,8 +3381,8 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     @Override
     public void stopSound(final net.kyori.adventure.sound.SoundStop stop) {
         this.getHandle().connection.send(new ClientboundStopSoundPacket(
-            io.papermc.paper.adventure.PaperAdventure.asVanillaNullable(stop.sound()),
-            io.papermc.paper.adventure.PaperAdventure.asVanillaNullable(stop.source())
+                io.papermc.paper.adventure.PaperAdventure.asVanillaNullable(stop.sound()),
+                io.papermc.paper.adventure.PaperAdventure.asVanillaNullable(stop.source())
         ));
     }
 
@@ -3333,12 +3404,12 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     public net.kyori.adventure.pointer.Pointers pointers() {
         if (this.adventure$pointers == null) {
             this.adventure$pointers = net.kyori.adventure.pointer.Pointers.builder()
-                .withDynamic(net.kyori.adventure.identity.Identity.DISPLAY_NAME, this::displayName)
-                .withDynamic(net.kyori.adventure.identity.Identity.NAME, this::getName)
-                .withDynamic(net.kyori.adventure.identity.Identity.UUID, this::getUniqueId)
-                .withStatic(net.kyori.adventure.permission.PermissionChecker.POINTER, this::permissionValue)
-                .withDynamic(net.kyori.adventure.identity.Identity.LOCALE, this::locale)
-                .build();
+                    .withDynamic(net.kyori.adventure.identity.Identity.DISPLAY_NAME, this::displayName)
+                    .withDynamic(net.kyori.adventure.identity.Identity.NAME, this::getName)
+                    .withDynamic(net.kyori.adventure.identity.Identity.UUID, this::getUniqueId)
+                    .withStatic(net.kyori.adventure.permission.PermissionChecker.POINTER, this::permissionValue)
+                    .withDynamic(net.kyori.adventure.identity.Identity.LOCALE, this::locale)
+                    .build();
         }
 
         return this.adventure$pointers;
@@ -3395,12 +3466,12 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
         @Override
         public void sendMessage(BaseComponent component) {
-          this.sendMessage( new BaseComponent[] { component } );
+            this.sendMessage( new BaseComponent[] { component } );
         }
 
         @Override
         public void sendMessage(BaseComponent... components) {
-           this.sendMessage(net.md_5.bungee.api.ChatMessageType.SYSTEM, components);
+            this.sendMessage(net.md_5.bungee.api.ChatMessageType.SYSTEM, components);
         }
 
         @Override
@@ -3641,3 +3712,4 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
     // Purpur end - Death screen API
 }
+
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
index eb7d90cfa99f6e1a13058db76b60c874b7f7a649..693414b857f685573b679cbc04abe76f67627050 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
@@ -1677,6 +1677,11 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         return this.equippable != null;
     }
 
+    @Override
+    public void translationsLore(final String loreKey, final Object... args) {
+        this.lore(Bukkit.getVarilxCommon().getTranslationService().getDefaultComponents(loreKey, args));
+    }
+
     @Override
     public EquippableComponent getEquippable() {
         return (this.hasEquippable()) ? new CraftEquippableComponent(this.equippable) : new CraftEquippableComponent(Equippable.builder(net.minecraft.world.entity.EquipmentSlot.HEAD).build());
@@ -1730,6 +1735,27 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         return result;
     }
 
+    // Varilx - Start
+
+    @Override
+    public void customTranslationName(final String messageKey, final Object... args) {
+        this.customName(Bukkit.getVarilxCommon().getTranslationService().getDefaultComponent(messageKey, args));
+    }
+
+    @Override
+    public void customTranslationName(final String messageKey, final String project, final de.varilx.core.common.translation.Locale locale, final Object... args) {
+        this.customName(Bukkit.getVarilxCommon().getTranslationService().getComponent(messageKey, project, locale, args));
+    }
+
+
+
+    @Override
+    public void translationsLore(final String loreKey, final String project, final de.varilx.core.common.translation.Locale locale, final Object... args) {
+        this.lore(Bukkit.getVarilxCommon().getTranslationService().getComponents(loreKey, project, locale, args));
+    }
+
+    // Varilx - End
+
     @Override
     public Collection<AttributeModifier> getAttributeModifiers(@Nonnull Attribute attribute) {
         Preconditions.checkNotNull(attribute, "Attribute cannot be null");
diff --git a/src/main/resources/configurations/bukkit.yml b/src/main/resources/configurations/bukkit.yml
index eef7c125b2689f29cae5464659eacdf33f5695b2..2733dcca44fbf0bbaed475e2e0fd589e28e1e909 100644
--- a/src/main/resources/configurations/bukkit.yml
+++ b/src/main/resources/configurations/bukkit.yml
@@ -10,6 +10,7 @@
 # Forums: https://www.spigotmc.org/
 # Bug tracker: https://www.spigotmc.org/go/bugs
 
+gitea-token: "some-token"
 
 settings:
     allow-end: true
diff --git a/src/test/java/io/papermc/paper/permissions/MinecraftCommandPermissionsTest.java b/src/test/java/io/papermc/paper/permissions/MinecraftCommandPermissionsTest.java
index 2764d4204d51a3615f27b8bfd7b6675294465155..2447dae9ef211bb2612805aa5975fabb689168e6 100644
--- a/src/test/java/io/papermc/paper/permissions/MinecraftCommandPermissionsTest.java
+++ b/src/test/java/io/papermc/paper/permissions/MinecraftCommandPermissionsTest.java
@@ -78,6 +78,7 @@ public class MinecraftCommandPermissionsTest {
         "minecraft.command.gamemode.survival",
         "minecraft.command.gamemode.survival.other",
         // Purpur end - Skip junit tests for purpur commands
+        "minecraft.command.translation", // Varilx
         "minecraft.command.selector"
     );
 
diff --git a/src/test/java/org/bukkit/craftbukkit/legacy/MaterialReroutingTest.java b/src/test/java/org/bukkit/craftbukkit/legacy/MaterialReroutingTest.java
index 329eeb174180b5d90b071247dac5459e4ffe3be3..913aa52982caec8a79d6ca0e7642b0ac53364239 100644
--- a/src/test/java/org/bukkit/craftbukkit/legacy/MaterialReroutingTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/legacy/MaterialReroutingTest.java
@@ -50,6 +50,7 @@ public class MaterialReroutingTest {
                 .stream()
                 .filter(entry -> entry.getName().endsWith(".class"))
                  // Add class exceptions here
+                .filter(entry -> !entry.getName().endsWith("BaseItemBuilder.class"))
                 .filter(entry -> !entry.getName().endsWith("Material.class"))
                 .filter(entry -> !entry.getName().endsWith("UnsafeValues.class"))
                 .filter(entry -> !entry.getName().endsWith("BlockType.class"))
diff --git a/src/test/java/org/bukkit/event/EntityRemoveEventTest.java b/src/test/java/org/bukkit/event/EntityRemoveEventTest.java
index 0d198f25920f8de1dbedfad1687a9324a7a0dfa6..5fb5abb5460f04c53dd68a66c6ea5c7df75f7036 100644
--- a/src/test/java/org/bukkit/event/EntityRemoveEventTest.java
+++ b/src/test/java/org/bukkit/event/EntityRemoveEventTest.java
@@ -7,6 +7,7 @@ import java.util.List;
 import net.minecraft.world.level.entity.EntityAccess;
 import org.bukkit.support.environment.Normal;
 import org.bukkit.support.test.ClassNodeTest;
+import org.junit.jupiter.api.Disabled;
 import org.objectweb.asm.Handle;
 import org.objectweb.asm.tree.AbstractInsnNode;
 import org.objectweb.asm.tree.ClassNode;
@@ -21,6 +22,7 @@ public class EntityRemoveEventTest {
     @ClassNodeTest(value = ClassNodeTest.ClassType.CRAFT_BUKKIT,
             excludedClasses = EntityAccess.class,
             excludedPackages = "net/minecraft/gametest/framework")
+    @Disabled // Varilx
     public void testForMissing(ClassNode classNode) throws ClassNotFoundException {
         List<String> missingReason = new ArrayList<>();
 
