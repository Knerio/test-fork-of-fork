--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -1,6 +_,5 @@
 package org.bukkit.craftbukkit.util;
 
-import ca.spottedleaf.moonrise.common.PlatformHooks;
 import com.google.common.base.Charsets;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.Multimap;
@@ -12,46 +_,38 @@
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import com.mojang.serialization.Dynamic;
 import com.mojang.serialization.JsonOps;
-import io.papermc.paper.registry.RegistryKey;
 import java.io.File;
 import java.io.IOException;
-import java.util.ArrayList;
 import java.util.HashMap;
-import java.util.List;
 import java.util.Locale;
 import java.util.Map;
-import java.util.Set;
 import java.util.logging.Level;
-import java.util.stream.Stream;
-import io.papermc.paper.entity.EntitySerializationFlag;
+import java.util.logging.Logger;
 import net.minecraft.SharedConstants;
 import net.minecraft.advancements.AdvancementHolder;
 import net.minecraft.commands.Commands;
 import net.minecraft.commands.arguments.item.ItemParser;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.core.registries.Registries;
-import net.minecraft.nbt.CompoundTag;
-import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.NbtOps;
 import net.minecraft.nbt.StringTag;
 import net.minecraft.nbt.Tag;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.MinecraftServer;
-import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.datafix.DataFixers;
 import net.minecraft.util.datafix.fixes.References;
-import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.alchemy.Potion;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.storage.LevelResource;
 import org.bukkit.Bukkit;
+import org.bukkit.FeatureFlag;
 import org.bukkit.Keyed;
 import org.bukkit.Material;
 import org.bukkit.NamespacedKey;
+import org.bukkit.Registry;
 import org.bukkit.UnsafeValues;
-import org.bukkit.World;
 import org.bukkit.advancement.Advancement;
 import org.bukkit.attribute.Attribute;
 import org.bukkit.attribute.AttributeModifier;
@@ -60,15 +_,15 @@
 // import org.bukkit.craftbukkit.CraftFeatureFlag; // Paper
 import org.bukkit.craftbukkit.CraftRegistry;
 import org.bukkit.craftbukkit.CraftServer;
-import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.block.CraftBiome;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
+import org.bukkit.craftbukkit.damage.CraftDamageEffect;
 import org.bukkit.craftbukkit.damage.CraftDamageSourceBuilder;
-import org.bukkit.craftbukkit.entity.CraftEntity;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.legacy.CraftLegacy;
 import org.bukkit.craftbukkit.legacy.FieldRename;
 import org.bukkit.craftbukkit.potion.CraftPotionType;
+import org.bukkit.damage.DamageEffect;
 import org.bukkit.damage.DamageSource;
 import org.bukkit.damage.DamageType;
 import org.bukkit.enchantments.Enchantment;
@@ -476,6 +_,12 @@
     }
 
     @Override
+    public DamageEffect getDamageEffect(String key) {
+        Preconditions.checkArgument(key != null, "key cannot be null");
+        return CraftDamageEffect.getById(key);
+    }
+
+    @Override
     public DamageSource.Builder createDamageSourceBuilder(DamageType damageType) {
         return new CraftDamageSourceBuilder(damageType);
     }
@@ -490,7 +_,7 @@
     }
 
     @Override
-    public <B extends Keyed> B get(RegistryKey<B> registry, NamespacedKey namespacedKey) {
+    public <B extends Keyed> B get(Registry<B> registry, NamespacedKey namespacedKey) {
         // We currently do not have any version-dependent remapping, so we can use current version
         return CraftRegistry.get(registry, namespacedKey, ApiVersion.CURRENT);
     }
@@ -516,7 +_,7 @@
         Preconditions.checkNotNull(item, "null cannot be serialized");
         Preconditions.checkArgument(item.getType() != Material.AIR, "air cannot be serialized");
 
-        return serializeNbtToBytes((CompoundTag) (item instanceof CraftItemStack ? ((CraftItemStack) item).handle : CraftItemStack.asNMSCopy(item)).save(MinecraftServer.getServer().registryAccess()));
+        return serializeNbtToBytes((net.minecraft.nbt.CompoundTag) (item instanceof CraftItemStack ? ((CraftItemStack) item).handle : CraftItemStack.asNMSCopy(item)).save(MinecraftServer.getServer().registryAccess()));
     }
 
     @Override
@@ -524,9 +_,9 @@
         Preconditions.checkNotNull(data, "null cannot be deserialized");
         Preconditions.checkArgument(data.length > 0, "cannot deserialize nothing");
 
-        CompoundTag compound = deserializeNbtFromBytes(data);
+        net.minecraft.nbt.CompoundTag compound = deserializeNbtFromBytes(data);
         final int dataVersion = compound.getInt("DataVersion");
-        compound = PlatformHooks.get().convertNBT(References.ITEM_STACK, MinecraftServer.getServer().fixerUpper, compound, dataVersion, this.getDataVersion()); // Paper - possibly use dataconverter
+        compound = ca.spottedleaf.moonrise.common.PlatformHooks.get().convertNBT(References.ITEM_STACK, MinecraftServer.getServer().fixerUpper, compound, dataVersion, this.getDataVersion()); // Paper - possibly use dataconverter
         return CraftItemStack.asCraftMirror(net.minecraft.world.item.ItemStack.parse(MinecraftServer.getServer().registryAccess(), compound).orElseThrow());
     }
 
@@ -561,98 +_,32 @@
     }
 
     @Override
-    public byte[] serializeEntity(org.bukkit.entity.Entity entity, EntitySerializationFlag... serializationFlags) {
+    public byte[] serializeEntity(org.bukkit.entity.Entity entity) {
         Preconditions.checkNotNull(entity, "null cannot be serialized");
-        Preconditions.checkArgument(entity instanceof CraftEntity, "Only CraftEntities can be serialized");
-
-        Set<EntitySerializationFlag> flags = Set.of(serializationFlags);
-        final boolean serializePassangers = flags.contains(EntitySerializationFlag.PASSENGERS);
-        final boolean forceSerialization = flags.contains(EntitySerializationFlag.FORCE);
-        final boolean allowPlayerSerialization = flags.contains(EntitySerializationFlag.PLAYER);
-        final boolean allowMiscSerialization = flags.contains(EntitySerializationFlag.MISC);
-        final boolean includeNonSaveable = allowPlayerSerialization || allowMiscSerialization;
-
-        net.minecraft.world.entity.Entity nmsEntity = ((CraftEntity) entity).getHandle();
-        (serializePassangers ? nmsEntity.getSelfAndPassengers() : Stream.of(nmsEntity)).forEach(e -> {
-            // Ensure force flag is not needed
-            Preconditions.checkArgument(
-                (e.getBukkitEntity().isValid() && e.getBukkitEntity().isPersistent()) || forceSerialization,
-                "Cannot serialize invalid or non-persistent entity %s(%s) without the FORCE flag",
-                e.getType().toShortString(),
-                e.getStringUUID()
-            );
-
-            if (e instanceof Player) {
-                // Ensure player flag is not needed
-                Preconditions.checkArgument(
-                    allowPlayerSerialization,
-                    "Cannot serialize player(%s) without the PLAYER flag",
-                    e.getStringUUID()
-                );
-            } else {
-                // Ensure player flag is not needed
-                Preconditions.checkArgument(
-                    nmsEntity.getType().canSerialize() || allowMiscSerialization,
-                    "Cannot serialize misc non-saveable entity %s(%s) without the MISC flag",
-                    e.getType().toShortString(),
-                    e.getStringUUID()
-                );
-            }
-        });
-
-        CompoundTag compound = new CompoundTag();
-        if (serializePassangers) {
-            if (!nmsEntity.saveAsPassenger(compound, true, includeNonSaveable, forceSerialization)) {
-                throw new IllegalArgumentException("Couldn't serialize entity");
-            }
-        } else {
-            List<net.minecraft.world.entity.Entity> pass = new ArrayList<>(nmsEntity.getPassengers());
-            nmsEntity.passengers = com.google.common.collect.ImmutableList.of();
-            boolean serialized = nmsEntity.saveAsPassenger(compound, true, includeNonSaveable, forceSerialization);
-            nmsEntity.passengers = com.google.common.collect.ImmutableList.copyOf(pass);
-            if (!serialized) {
-                throw new IllegalArgumentException("Couldn't serialize entity");
-            }
-        }
+        Preconditions.checkArgument(entity instanceof org.bukkit.craftbukkit.entity.CraftEntity, "only CraftEntities can be serialized");
+
+        net.minecraft.nbt.CompoundTag compound = new net.minecraft.nbt.CompoundTag();
+        ((org.bukkit.craftbukkit.entity.CraftEntity) entity).getHandle().serializeEntity(compound);
         return serializeNbtToBytes(compound);
     }
 
     @Override
-    public org.bukkit.entity.Entity deserializeEntity(byte[] data, World world, boolean preserveUUID, boolean preservePassengers) {
+    public org.bukkit.entity.Entity deserializeEntity(byte[] data, org.bukkit.World world, boolean preserveUUID) {
         Preconditions.checkNotNull(data, "null cannot be deserialized");
-        Preconditions.checkArgument(data.length > 0, "Cannot deserialize empty data");
+        Preconditions.checkArgument(data.length > 0, "cannot deserialize nothing");
 
-        CompoundTag compound = deserializeNbtFromBytes(data);
+        net.minecraft.nbt.CompoundTag compound = deserializeNbtFromBytes(data);
         int dataVersion = compound.getInt("DataVersion");
-        compound = PlatformHooks.get().convertNBT(References.ENTITY, MinecraftServer.getServer().fixerUpper, compound, dataVersion, this.getDataVersion()); // Paper - possibly use dataconverter
-        if (!preservePassengers) {
-            compound.remove("Passengers");
-        }
-        net.minecraft.world.entity.Entity nmsEntity = deserializeEntity(compound, ((CraftWorld) world).getHandle(), preserveUUID);
-        return nmsEntity.getBukkitEntity();
-    }
-
-    private net.minecraft.world.entity.Entity deserializeEntity(CompoundTag compound, ServerLevel world, boolean preserveUUID) {
+        compound = ca.spottedleaf.moonrise.common.PlatformHooks.get().convertNBT(References.ENTITY, MinecraftServer.getServer().fixerUpper, compound, dataVersion, this.getDataVersion()); // Paper - possibly use dataconverter
         if (!preserveUUID) {
-            // Generate a new UUID, so we don't have to worry about deserializing the same entity twice
+            // Generate a new UUID so we don't have to worry about deserializing the same entity twice
             compound.remove("UUID");
         }
-        net.minecraft.world.entity.Entity nmsEntity = net.minecraft.world.entity.EntityType.create(compound, world, net.minecraft.world.entity.EntitySpawnReason.LOAD)
-            .orElseThrow(() -> new IllegalArgumentException("An ID was not found for the data. Did you downgrade?"));
-        if (compound.contains("Passengers", Tag.TAG_LIST)) {
-            ListTag passengersCompound = compound.getList("Passengers", Tag.TAG_COMPOUND);
-            for (Tag tag : passengersCompound) {
-                if (!(tag instanceof CompoundTag serializedPassenger)) {
-                    continue;
-                }
-                net.minecraft.world.entity.Entity passengerEntity = deserializeEntity(serializedPassenger, world, preserveUUID);
-                passengerEntity.startRiding(nmsEntity, true);
-            }
-        }
-        return nmsEntity;
+        return net.minecraft.world.entity.EntityType.create(compound, ((org.bukkit.craftbukkit.CraftWorld) world).getHandle(), net.minecraft.world.entity.EntitySpawnReason.LOAD)
+            .orElseThrow(() -> new IllegalArgumentException("An ID was not found for the data. Did you downgrade?")).getBukkitEntity();
     }
 
-    private byte[] serializeNbtToBytes(CompoundTag compound) {
+    private byte[] serializeNbtToBytes(net.minecraft.nbt.CompoundTag compound) {
         compound.putInt("DataVersion", getDataVersion());
         java.io.ByteArrayOutputStream outputStream = new java.io.ByteArrayOutputStream();
         try {
@@ -666,8 +_,8 @@
         return outputStream.toByteArray();
     }
 
-    private CompoundTag deserializeNbtFromBytes(byte[] data) {
-        CompoundTag compound;
+    private net.minecraft.nbt.CompoundTag deserializeNbtFromBytes(byte[] data) {
+        net.minecraft.nbt.CompoundTag compound;
         try {
             compound = net.minecraft.nbt.NbtIo.readCompressed(
                 new java.io.ByteArrayInputStream(data), net.minecraft.nbt.NbtAccounter.unlimitedHeap()
