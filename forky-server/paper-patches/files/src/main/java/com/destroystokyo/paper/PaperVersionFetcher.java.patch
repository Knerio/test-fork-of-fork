--- a/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
+++ b/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
@@ -15,6 +_,8 @@
 import java.io.InputStreamReader;
 import java.net.HttpURLConnection;
 import java.net.URI;
+import java.net.URL;
+import java.nio.charset.StandardCharsets;
 import java.util.Optional;
 import java.util.OptionalInt;
 import java.util.stream.StreamSupport;
@@ -22,6 +_,8 @@
 import net.kyori.adventure.text.event.ClickEvent;
 import net.kyori.adventure.text.format.NamedTextColor;
 import net.kyori.adventure.text.format.TextDecoration;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftServer;
 import org.checkerframework.checker.nullness.qual.NonNull;
 import org.checkerframework.checker.nullness.qual.Nullable;
 import org.checkerframework.framework.qual.DefaultQualifier;
@@ -35,10 +_,10 @@
     private static final Logger LOGGER = LogUtils.getClassLogger();
     private static final int DISTANCE_ERROR = -1;
     private static final int DISTANCE_UNKNOWN = -2;
-    // Purpur start - Rebrand
-    private static final String DOWNLOAD_PAGE = "https://purpurmc.org/downloads";
+    // Purpur start - Rebrand // Varilx start - Rebrand
+    private static final String DOWNLOAD_PAGE = "https://git.varilx.de/Varilx/vax-spigot/releases/";
     private static int distance = DISTANCE_UNKNOWN; public int distance() { return distance; }
-    // Purpur end - Rebrand
+    // Purpur end - Rebrand // Varilx end - Rebrand
 
     @Override
     public long getCacheTime() {
@@ -52,7 +_,7 @@
         if (build.buildNumber().isEmpty() && build.gitCommit().isEmpty()) {
             updateMessage = text("You are running a development version without access to version information", color(0xFF5300));
         } else {
-            updateMessage = getUpdateStatusMessage("PurpurMC/Purpur", build); // Purpur - Rebrand
+            updateMessage = getUpdateStatusMessage("Varilx/vax-spigot", build); // Purpur - Rebrand
         }
         final @Nullable Component history = this.getHistory();
 
@@ -64,17 +_,18 @@
 
         final OptionalInt buildNumber = build.buildNumber();
         if (buildNumber.isPresent()) {
-            distance = fetchDistanceFromSiteApi(build, buildNumber.getAsInt());
+            distance = fetchDistanceFromSiteApi(repo, build, buildNumber.getAsInt());
         } else {
             final Optional<String> gitBranch = build.gitBranch();
             final Optional<String> gitCommit = build.gitCommit();
             if (gitBranch.isPresent() && gitCommit.isPresent()) {
-                distance = fetchDistanceFromGitHub(repo, gitBranch.get(), gitCommit.get());
+                return text("You are running a development version without access to version information", color(0xFF5300));
             }
         }
 
         return switch (distance) {
-            case DISTANCE_ERROR -> text("* Error obtaining version information", NamedTextColor.RED); // Purpur - Rebrand
+            case DISTANCE_ERROR ->
+                text("* Error obtaining version information", NamedTextColor.RED); // Purpur - Rebrand
             case 0 -> text("* You are running the latest version", NamedTextColor.GREEN); // Purpur - Rebrand
             case DISTANCE_UNKNOWN -> text("* Unknown version", NamedTextColor.YELLOW); // Purpur - Rebrand
             default -> text("* You are " + distance + " version(s) behind", NamedTextColor.YELLOW) // Purpur - Rebrand
@@ -86,18 +_,26 @@
         };
     }
 
-    private static int fetchDistanceFromSiteApi(final ServerBuildInfo build, final int jenkinsBuild) {
+    private static int fetchDistanceFromSiteApi(final String repo, final ServerBuildInfo build, final int jenkinsBuild) {
         try {
-            try (final BufferedReader reader = Resources.asCharSource(
-                URI.create("https://api.purpurmc.org/v2/purpur/" + build.minecraftVersionId()).toURL(), // Purpur - Rebrand
-                Charsets.UTF_8
-            ).openBufferedStream()) {
-                final JsonObject json = new Gson().fromJson(reader, JsonObject.class);
-                //final JsonArray builds = json.getAsJsonArray("builds"); // Purpur - Rebrand
-                final int latest = json.getAsJsonObject("builds").getAsJsonPrimitive("latest").getAsInt(); // Purpur - Rebrand
-                return latest - jenkinsBuild;
+            URL url = URI.create("https://git.varilx.de/api/v1/repos/" + repo + "/releases").toURL();
+            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
+            connection.setRequestMethod("GET");
+            connection.setRequestProperty("Authorization", "token " + ((CraftServer) Bukkit.getServer()).getGiteaToken());
+            connection.setRequestProperty("Accept", "application/json");
+
+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8))) {
+                final JsonArray json = new Gson().fromJson(reader, JsonArray.class);
+                int distance = 0;
+                for (final JsonElement current : json) {
+                    final JsonObject obj = current.getAsJsonObject();
+                    if (obj.get("id").getAsInt() == jenkinsBuild) break;
+                    if (obj.get("prerelease").getAsBoolean()) continue;
+                    distance++;
+                }
+                return distance;
             } catch (final JsonSyntaxException ex) {
-                LOGGER.error("Error parsing json from Purpur's downloads API", ex); // Purpur - Rebrand
+                LOGGER.error("Error parsing json from Giteas's API", ex); // Purpur - Rebrand // Varilx - Rebrand
                 return DISTANCE_ERROR;
             }
         } catch (final IOException e) {
@@ -106,29 +_,6 @@
         }
     }
 
-    // Contributed by Techcable <Techcable@outlook.com> in GH-65
-    private static int fetchDistanceFromGitHub(final String repo, final String branch, final String hash) {
-        try {
-            final HttpURLConnection connection = (HttpURLConnection) URI.create("https://api.github.com/repos/%s/compare/%s...%s".formatted(repo, branch, hash)).toURL().openConnection();
-            connection.connect();
-            if (connection.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) return DISTANCE_UNKNOWN; // Unknown commit
-            try (final BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), Charsets.UTF_8))) {
-                final JsonObject obj = new Gson().fromJson(reader, JsonObject.class);
-                final String status = obj.get("status").getAsString();
-                return switch (status) {
-                    case "identical" -> 0;
-                    case "behind" -> obj.get("behind_by").getAsInt();
-                    default -> DISTANCE_ERROR;
-                };
-            } catch (final JsonSyntaxException | NumberFormatException e) {
-                LOGGER.error("Error parsing json from GitHub's API", e);
-                return DISTANCE_ERROR;
-            }
-        } catch (final IOException e) {
-            LOGGER.error("Error while parsing version", e);
-            return DISTANCE_ERROR;
-        }
-    }
 
     private @Nullable Component getHistory() {
         final VersionHistoryManager.@Nullable VersionData data = VersionHistoryManager.INSTANCE.getVersionData();
