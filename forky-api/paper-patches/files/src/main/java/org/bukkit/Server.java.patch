--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -14,9 +_,12 @@
 import java.util.UUID;
 import java.util.function.Consumer;
 import java.util.logging.Logger;
+import de.varilx.core.common.CommonAPI;
+import de.varilx.core.common.translation.Locale;
 import net.kyori.adventure.text.Component;
 import net.kyori.adventure.text.minimessage.MiniMessage;
 import net.kyori.adventure.text.minimessage.tag.resolver.TagResolver;
+import net.kyori.adventure.title.Title;
 import org.bukkit.Warning.WarningState;
 import org.bukkit.advancement.Advancement;
 import org.bukkit.block.data.BlockData;
@@ -73,6 +_,13 @@
 public interface Server extends PluginMessageRecipient, net.kyori.adventure.audience.ForwardingAudience { // Paper
 
     /**
+     * Gets the CommonAPI instance
+     * @return the instance
+     */
+    @NotNull
+    public CommonAPI getVarilxCommon();
+
+    /**
      * Returns the de facto plugins directory, generally used for storing plugin jars to be loaded,
      * as well as their {@link org.bukkit.plugin.Plugin#getDataFolder() data folders}.
      *
@@ -125,6 +_,7 @@
     public String getBukkitVersion();
 
     // Paper start - expose game version
+
     /**
      * Gets the version of game this server implements
      *
@@ -152,7 +_,7 @@
      * affect the collection are fully supported. The effects following
      * (non-exhaustive) {@link Entity#teleport(Location) teleportation},
      * {@link Player#setHealth(double) death}, and {@link Player#kickPlayer(
-     * String) kicking} are undefined. Any use of this collection from
+     *String) kicking} are undefined. Any use of this collection from
      * asynchronous threads is unsafe.
      * <p>
      * For safe consequential iteration or mimicking the old array behavior,
@@ -390,6 +_,7 @@
     public int broadcastMessage(@NotNull String message);
 
     // Paper start
+
     /**
      * Sends the component to all online players.
      *
@@ -674,6 +_,7 @@
     public Player getPlayer(@NotNull UUID id);
 
     // Paper start
+
     /**
      * Gets the unique ID of the player currently known as the specified player name
      * In Offline Mode, will return an Offline UUID
@@ -718,6 +_,7 @@
     public List<World> getWorlds();
 
     // Paper start
+
     /**
      * Gets whether the worlds are being ticked right now.
      *
@@ -788,6 +_,7 @@
     public World getWorld(@NotNull UUID uid);
 
     // Paper start
+
     /**
      * Gets the world from the given NamespacedKey
      *
@@ -881,6 +_,7 @@
     @NotNull
     public ItemStack createExplorerMap(@NotNull World world, @NotNull Location location, @NotNull StructureType structureType, int radius, boolean findUnexplored);
     // Paper start
+
     /**
      * Create a new explorer map targeting the closest nearby structure of a
      * given {@link org.bukkit.generator.structure.StructureType}.
@@ -932,6 +_,7 @@
     public void reloadData();
 
     // Paper start - update reloadable data
+
     /**
      * Updates all advancement, tag, and recipe data to all connected clients.
      * Useful for updating clients to new advancements/recipes/tags.
@@ -1005,6 +_,7 @@
     public boolean addRecipe(@Nullable Recipe recipe);
 
     // Paper start - method to send recipes immediately
+
     /**
      * Adds a recipe to the crafting manager.
      *
@@ -1185,6 +_,7 @@
     public boolean removeRecipe(@NotNull NamespacedKey key);
 
     // Paper start - method to resend recipes
+
     /**
      * Remove a recipe from the server.
      * <p>
@@ -1294,6 +_,7 @@
     @Deprecated // Paper
     public int broadcast(@NotNull String message, @NotNull String permission);
     // Paper start
+
     /**
      * Broadcast a message to all players.
      * <p>
@@ -1336,6 +_,7 @@
     public OfflinePlayer getOfflinePlayer(@NotNull String name);
 
     // Paper start
+
     /**
      * Gets the player by the given name, regardless if they are offline or
      * online.
@@ -1378,7 +_,8 @@
      * @deprecated use {@link #createProfile(UUID, String)}
      */
     @NotNull
-    @Deprecated(since = "1.18.1") // Paper
+    @Deprecated(since = "1.18.1")
+    // Paper
     PlayerProfile createPlayerProfile(@Nullable UUID uniqueId, @Nullable String name);
 
     /**
@@ -1390,7 +_,8 @@
      * @deprecated use {@link #createProfile(UUID)}
      */
     @NotNull
-    @Deprecated(since = "1.18.1") // Paper
+    @Deprecated(since = "1.18.1")
+    // Paper
     PlayerProfile createPlayerProfile(@NotNull UUID uniqueId);
 
     /**
@@ -1403,7 +_,8 @@
      * @deprecated use {@link #createProfile(String)}
      */
     @NotNull
-    @Deprecated(since = "1.18.1") // Paper
+    @Deprecated(since = "1.18.1")
+    // Paper
     PlayerProfile createPlayerProfile(@NotNull String name);
 
     /**
@@ -1470,6 +_,7 @@
     public <T extends BanList<?>> T getBanList(@NotNull BanList.Type type);
 
     // Paper start - add BanListType (which has a generic)
+
     /**
      * Gets a ban list for the supplied type.
      *
@@ -1515,6 +_,7 @@
     public ConsoleCommandSender getConsoleSender();
 
     // Paper start
+
     /**
      * Creates a special {@link CommandSender} which redirects command feedback (in the form of chat messages) to the
      * specified listener. The returned sender will have the same effective permissions as {@link #getConsoleSender()}.
@@ -1584,6 +_,7 @@
     Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type);
 
     // Paper start
+
     /**
      * Creates an empty inventory with the specified type and title. If the type
      * is {@link InventoryType#CHEST}, the new inventory has a size of 27;
@@ -1654,6 +_,7 @@
     Inventory createInventory(@Nullable InventoryHolder owner, int size) throws IllegalArgumentException;
 
     // Paper start
+
     /**
      * Creates an empty inventory of type {@link InventoryType#CHEST} with the
      * specified size and title.
@@ -1685,7 +_,42 @@
     @NotNull
     Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull String title) throws IllegalArgumentException;
 
+    // Varilx - Start
+
+    /**
+     * Creates a translated inventory
+     *
+     * @param owner the owner
+     * @param titleKey the titlekey
+     * @return the inventory
+     * @see Bukkit#createInventory(InventoryHolder, InventoryType, net.kyori.adventure.text.Component)
+     */
+    @NotNull Inventory createTranslatedInventory(@Nullable InventoryHolder owner, int size, @NotNull String titleKey, @NotNull Object @NotNull ... args);
+
+    /**
+     * Creates a translated inventory
+     * @param owner the owner
+     * @param titleKey the titlekey
+     * @return the inventory
+     * @see Bukkit#createInventory(InventoryHolder, InventoryType, net.kyori.adventure.text.Component)
+     */
+    @NotNull Inventory createTranslatedInventory(@Nullable InventoryHolder owner, int size, @NotNull String titleKey, @NotNull String project, @NotNull Object @NotNull ... args);
+
+    /**
+     * Creates a translated inventory
+     * @param owner the owner
+     * @param titleKey the titlekey
+     * @param locale the locale
+     * @param project the project
+     * @return the inventory
+     * @see Bukkit#createInventory(InventoryHolder, InventoryType, net.kyori.adventure.text.Component)
+     */
+    @NotNull Inventory createTranslatedInventory(@Nullable InventoryHolder owner, int size, @NotNull String titleKey, @NotNull String project, @NotNull Locale locale, @NotNull Object @NotNull ... args);
+
+    // Varilx - End
+
     // Paper start
+
     /**
      * Creates an empty merchant.
      *
@@ -1813,6 +_,7 @@
     boolean isPrimaryThread();
 
     // Paper start
+
     /**
      * Gets the message that is displayed on the server list.
      *
@@ -1842,7 +_,8 @@
      * @deprecated in favour of {@link #motd()}
      */
     @NotNull
-    @Deprecated // Paper
+    @Deprecated
+    // Paper
     String getMotd();
 
     /**
@@ -1851,7 +_,8 @@
      * @param motd The message to be displayed
      * @deprecated in favour of {@link #motd(net.kyori.adventure.text.Component)}
      */
-    @Deprecated // Paper
+    @Deprecated
+    // Paper
     void setMotd(@NotNull String motd);
 
     /**
@@ -1870,7 +_,8 @@
      * @deprecated in favour of {@link #shutdownMessage()}
      */
     @Nullable
-    @Deprecated // Paper
+    @Deprecated
+    // Paper
     String getShutdownMessage();
 
     /**
@@ -2101,6 +_,7 @@
     Entity getEntity(@NotNull UUID uuid);
 
     // Paper start
+
     /**
      * Gets the current server TPS
      *
@@ -2124,6 +_,7 @@
     // Paper end
 
     // Paper start
+
     /**
      * Gets the active {@link org.bukkit.command.CommandMap}
      *
@@ -2291,7 +_,8 @@
      * with keys from {@link io.papermc.paper.registry.RegistryKey}
      */
     @Nullable
-    @Deprecated(since = "1.20.6") // Paper
+    @Deprecated(since = "1.20.6")
+    // Paper
     <T extends Keyed> Registry<T> getRegistry(@NotNull Class<T> tClass);
 
     /**
@@ -2302,6 +_,164 @@
     @NotNull
     UnsafeValues getUnsafe();
 
+    // Varilx Start
+
+    /**
+     * This method trys to find the project with the given key
+     * If not found uses the common project
+     * @param key the key
+     * @param args the args for the message
+     * @see CommandSender#sendTranslatedMessage(String, String, Locale, Object...)
+     */
+    public void sendTranslatedMessage(@NotNull String key, @NotNull Object... args);
+
+    /**
+     * This method sends a translated message
+     * @param key the message key
+     * @param project the project where the key is located
+     * @param locale the locale
+     * @param args the args (<1>, <2>, ...)
+     */
+    public void sendTranslatedMessage(@NotNull String key, @NotNull String project, @NotNull Locale locale, @NotNull Object... args);
+
+    /**
+     * Displays a translated title based on the specified title key and arguments.
+     *
+     * @param titleKey The key for the title translation.
+     * @param args The arguments to be used in the translation.
+     */
+    void showTranslatedTitle(@NotNull String titleKey, @NotNull Object... args);
+
+    /**
+     * Displays a translated title based on the specified title key, project, locale, and arguments.
+     *
+     * @param titleKey The key for the title translation.
+     * @param project The name of the project used for translation context.
+     * @param locale The locale to use for translation.
+     * @param args The arguments to be used in the translation.
+     */
+    void showTranslatedTitle(@NotNull String titleKey, @NotNull String project, @NotNull Locale locale, @NotNull Object... args);
+
+    /**
+     * Displays a translated title with specified times based on the title key and arguments.
+     *
+     * @param titleKey The key for the title translation.
+     * @param times The timing information for the title display.
+     * @param args The arguments to be used in the translation.
+     */
+    void showTranslatedTitle(@NotNull String titleKey, @NotNull Title.Times times, @NotNull Object... args);
+
+    /**
+     * Displays a translated title with specified times and project based on the title key and arguments.
+     *
+     * @param titleKey The key for the title translation.
+     * @param project The name of the project used for translation context.
+     * @param times The timing information for the title display.
+     * @param args The arguments to be used in the translation.
+     */
+    void showTranslatedTitle(@NotNull String titleKey, @NotNull String project, @NotNull Title.Times times, @NotNull Object... args);
+
+    /**
+     * Displays a translated title with specified times, project, and locale based on the title key and arguments.
+     *
+     * @param titleKey The key for the title translation.
+     * @param project The name of the project used for translation context.
+     * @param locale The locale to use for translation.
+     * @param times The timing information for the title display.
+     * @param args The arguments to be used in the translation.
+     */
+    void showTranslatedTitle(@NotNull String titleKey, @NotNull String project, @NotNull Locale locale, @NotNull Title.Times times, @NotNull Object... args);
+
+
+    /**
+     * Shows a translated bossbar to the whole server
+     * with the default Locale
+     * @param bossbarKey the message key for the bossbar
+     */
+    void showTranslatedBossbar(@NotNull String bossbarKey, @NotNull Object @NotNull ... args);
+
+    /**
+     * Shows a translated bossbar to the whole server
+     * with the default Locale
+     * @param bossbarKey the message key for the bossbar
+     * @param bossBar the bossbar settings
+     */
+    void showTranslatedBossbar(@NotNull String bossbarKey, @NotNull net.kyori.adventure.bossbar.BossBar bossBar, @NotNull Object @NotNull ... args);
+
+    /**
+     * Shows a translated bossbar to the whole server
+     * with the default Locale
+     * @param bossbarKey the message key for the bossbar
+     * @param project the project
+     * @param bossBar the bossbar settings
+     */
+    void showTranslatedBossbar(@NotNull String bossbarKey, @NotNull String project, @NotNull net.kyori.adventure.bossbar.BossBar bossBar, @NotNull Object @NotNull ... args);
+
+    /**
+     * Shows a translated bossbar to the whole server
+     * @param bossbarKey the message key for the bossbar
+     * @param project the project
+     * @param locale the locale
+     * @param bossBar the bossbar settings
+     * @see #showBossBar(net.kyori.adventure.bossbar.BossBar)
+     */
+    void showTranslatedBossbar(@NotNull String bossbarKey, @NotNull String project, @NotNull Locale locale, @NotNull net.kyori.adventure.bossbar.BossBar bossBar, @NotNull Object @NotNull ... args);
+
+    /**
+     * Sends a translated action bar
+     * @param messageKey the message key
+     * @param args the args for the messag
+     * @see #sendTranslatedActionBar(String, String, Locale, Object...)
+     * @see #sendTranslatedMessage(String, String, Locale, Object...)
+     */
+    public void sendTranslatedActionBar(@NotNull String messageKey, @NotNull Object@NotNull ... args);
+
+
+    /**
+     * Sends a translated actionbar
+     * @param messageKey the message key
+     * @param project the project
+     * @param locale the locale
+     * @param args the args
+     * @see #sendTranslatedMessage(String, String, Locale, Object...)
+     */
+    public void sendTranslatedActionBar(@NotNull String messageKey, @NotNull String project, @NotNull Locale locale, Object @NotNull... args);
+
+
+
+    /**
+     * Sends a translated broadcast message based on the specified message key and arguments.
+     *
+     * @param messageKey The key for the broadcast message translation.
+     * @param args The arguments to be used in the translation.
+     * @return An integer representing the result of the broadcast operation.
+     */
+    int translatedBroadcast(@NotNull String messageKey, @NotNull Object[] args);
+
+    /**
+     * Sends a translated broadcast message based on the specified message key, project, and arguments.
+     *
+     * @param messageKey The key for the broadcast message translation.
+     * @param project The name of the project used for translation context.
+     * @param args The arguments to be used in the translation.
+     * @return An integer representing the result of the broadcast operation.
+     */
+    int translatedBroadcast(@NotNull String messageKey, @NotNull String project, @NotNull Object[] args);
+
+    /**
+     * Sends a translated broadcast message based on the specified message key, project, locale, and arguments.
+     *
+     * @param messageKey The key for the broadcast message translation.
+     * @param project The name of the project used for translation context.
+     * @param locale The locale to use for translation.
+     * @param args The arguments to be used in the translation.
+     * @return An integer representing the result of the broadcast operation.
+     */
+    int translatedBroadcast(@NotNull String messageKey, @NotNull String project, @NotNull Locale locale, @NotNull Object[] args);
+
+
+    // Varilx End
+
     // Spigot start
     public class Spigot {
 
@@ -2312,20 +_,17 @@
 
         // Paper start
         @NotNull
-        public org.bukkit.configuration.file.YamlConfiguration getBukkitConfig()
-        {
-            throw new UnsupportedOperationException( "Not supported yet." );
-        }
-
-        @NotNull
-        public org.bukkit.configuration.file.YamlConfiguration getSpigotConfig()
-        {
-            throw new UnsupportedOperationException("Not supported yet.");
-        }
-
-        @NotNull
-        public org.bukkit.configuration.file.YamlConfiguration getPaperConfig()
-        {
+        public org.bukkit.configuration.file.YamlConfiguration getBukkitConfig() {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        @NotNull
+        public org.bukkit.configuration.file.YamlConfiguration getSpigotConfig() {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        @NotNull
+        public org.bukkit.configuration.file.YamlConfiguration getPaperConfig() {
             throw new UnsupportedOperationException("Not supported yet.");
         }
         // Paper end
@@ -2381,6 +_,7 @@
     boolean reloadCommandAliases(); // Paper
 
     // Paper start - allow preventing player name suggestions by default
+
     /**
      * Checks if player names should be suggested when a command returns {@code null} as
      * their tab completion result.
@@ -2518,6 +_,7 @@
     // Paper end
 
     // Paper start - Folia region threading API
+
     /**
      * Returns the Folia region task scheduler. The region task scheduler can be used to schedule
      * tasks by location to be executed on the region which owns the location.
@@ -2652,6 +_,7 @@
     // Paper end - Folia region threading API
 
     // Paper start - API to check if the server is sleeping
+
     /**
      * Returns whether the server is sleeping/paused.
      */
